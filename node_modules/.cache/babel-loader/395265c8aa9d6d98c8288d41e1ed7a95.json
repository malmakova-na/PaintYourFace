{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Buttons from '../Buttons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst draw = (canvas, context, color) => {\n  canvas.onmousemove = function drawIfPressed(e) {\n    let x = e.offsetX;\n    let y = e.offsetY;\n    let dx = e.movementX;\n    let dy = e.movementY;\n\n    if (e.buttons > 0) {\n      context.beginPath();\n      context.moveTo(x, y);\n      context.lineTo(x - dx, y - dy);\n      context.stroke();\n      context.strokeStyle = color;\n      context.closePath();\n    }\n  };\n};\n\nconst Canvas = props => {\n  _s();\n\n  let [color, setColor] = useState('black');\n  const canvasRef = useRef(null);\n\n  const onChangeColor = color => {\n    setColor(color);\n  };\n\n  const clear = context => context.clearRect(0, 0, canvas.width, canvas.height);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.lineCap = \"round\";\n    context.lineWidth = 8;\n    draw(canvas, context, color);\n  }, [draw, color]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas\",\n      width: \"450\",\n      height: \"450\",\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Palette, {\n      onChangeColor: onChangeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 10\n  }, this);\n}; // <Buttons clear={clear(canvasRef.getContext('2d'))} />\n\n\n_s(Canvas, \"IDUxgqFpJnPTXGTaMCkcNmrDlyo=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js"],"names":["React","useRef","useEffect","Fragment","useState","Palette","Buttons","draw","canvas","context","color","onmousemove","drawIfPressed","e","x","offsetX","y","offsetY","dx","movementX","dy","movementY","buttons","beginPath","moveTo","lineTo","stroke","strokeStyle","closePath","Canvas","props","setColor","canvasRef","onChangeColor","clear","clearRect","width","height","current","getContext","lineCap","lineWidth"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;;;AAEA,MAAMC,IAAI,GAAG,CAACC,MAAD,EAASC,OAAT,EAAkBC,KAAlB,KAA4B;AACrCF,EAAAA,MAAM,CAACG,WAAP,GAAqB,SAASC,aAAT,CAAwBC,CAAxB,EAA2B;AAC5C,QAAIC,CAAC,GAAGD,CAAC,CAACE,OAAV;AACA,QAAIC,CAAC,GAAGH,CAAC,CAACI,OAAV;AACA,QAAIC,EAAE,GAAGL,CAAC,CAACM,SAAX;AACA,QAAIC,EAAE,GAAGP,CAAC,CAACQ,SAAX;;AACA,QAAIR,CAAC,CAACS,OAAF,GAAY,CAAhB,EAAmB;AACjBb,MAAAA,OAAO,CAACc,SAAR;AACAd,MAAAA,OAAO,CAACe,MAAR,CAAeV,CAAf,EAAkBE,CAAlB;AACAP,MAAAA,OAAO,CAACgB,MAAR,CAAeX,CAAC,GAAGI,EAAnB,EAAuBF,CAAC,GAAGI,EAA3B;AACAX,MAAAA,OAAO,CAACiB,MAAR;AACAjB,MAAAA,OAAO,CAACkB,WAAR,GAAsBjB,KAAtB;AACAD,MAAAA,OAAO,CAACmB,SAAR;AACD;AACJ,GAbD;AAcH,CAfD;;AAgBA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AACpB,MAAI,CAACpB,KAAD,EAAQqB,QAAR,IAAoB3B,QAAQ,CAAC,OAAD,CAAhC;AACA,QAAM4B,SAAS,GAAG/B,MAAM,CAAC,IAAD,CAAxB;;AACA,QAAMgC,aAAa,GAAGvB,KAAK,IAAI;AAC3BqB,IAAAA,QAAQ,CAACrB,KAAD,CAAR;AACH,GAFD;;AAGA,QAAMwB,KAAK,GAAIzB,OAAD,IAAYA,OAAO,CAAC0B,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB3B,MAAM,CAAC4B,KAA/B,EAAsC5B,MAAM,CAAC6B,MAA7C,CAA1B;;AACAnC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,MAAM,GAAGwB,SAAS,CAACM,OAAzB;AACA,UAAM7B,OAAO,GAAGD,MAAM,CAAC+B,UAAP,CAAkB,IAAlB,CAAhB;AACA9B,IAAAA,OAAO,CAAC+B,OAAR,GAAkB,OAAlB;AACA/B,IAAAA,OAAO,CAACgC,SAAR,GAAoB,CAApB;AACAlC,IAAAA,IAAI,CAACC,MAAD,EAASC,OAAT,EAAkBC,KAAlB,CAAJ;AACH,GANQ,EAMN,CAACH,IAAD,EAAOG,KAAP,CANM,CAAT;AAQF,sBAAO,QAAC,QAAD;AAAA,4BACL;AAAQ,MAAA,EAAE,EAAC,QAAX;AAAoB,MAAA,KAAK,EAAC,KAA1B;AAAgC,MAAA,MAAM,EAAC,KAAvC;AAA6C,MAAA,GAAG,EAAEsB,SAAlD;AAAA,SAAiEF;AAAjE;AAAA;AAAA;AAAA;AAAA,YADK,eAEL,QAAC,OAAD;AAAS,MAAA,aAAa,EAAEG;AAAxB;AAAA;AAAA;AAAA;AAAA,YAFK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAID,CAnBD,C,CAoBA;;;GApBMJ,M;;KAAAA,M;AAqBN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Buttons from '../Buttons'\n\nconst draw = (canvas, context, color) => {\n    canvas.onmousemove = function drawIfPressed (e) {\n        let x = e.offsetX;\n        let y = e.offsetY;\n        let dx = e.movementX;\n        let dy = e.movementY;\n        if (e.buttons > 0) {\n          context.beginPath();\n          context.moveTo(x, y);\n          context.lineTo(x - dx, y - dy);\n          context.stroke();\n          context.strokeStyle = color;\n          context.closePath();\n        }\n    };\n}\nconst Canvas = props => {\n    let [color, setColor] = useState('black');\n    const canvasRef = useRef(null);\n    const onChangeColor = color => {\n        setColor(color);\n    };\n    const clear = (context) =>context.clearRect(0, 0, canvas.width, canvas.height);\n    useEffect(() => {\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d');\n        context.lineCap = \"round\";\n        context.lineWidth = 8;\n        draw(canvas, context, color);\n    }, [draw, color])\n  \n  return <Fragment>\n    <canvas id='canvas' width='450' height='450' ref={canvasRef} {...props}/>\n    <Palette onChangeColor={onChangeColor}></Palette>\n  </Fragment> \n}\n// <Buttons clear={clear(canvasRef.getContext('2d'))} />\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}