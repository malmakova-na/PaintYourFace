{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Buttons from '../Buttons';\nimport styles from '../Gallery.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet paths = [],\n    points = [];\n\nconst draw = (canvas, color, mode) => {\n  let context = canvas.getContext('2d');\n\n  canvas.onmousemove = function drawIfPressed(e) {\n    let x = e.offsetX;\n    let y = e.offsetY;\n    let dx = e.movementX;\n    let dy = e.movementY;\n    context.globalCompositeOperation = mode === 'line' ? \"source-over\" : \"destination-out\";\n    context.lineCap = \"round\";\n    context.lineWidth = 8;\n\n    if (e.buttons > 0) {\n      context.beginPath();\n      context.moveTo(x, y);\n      context.lineTo(x - dx, y - dy);\n      context.stroke();\n      context.strokeStyle = color;\n      context.closePath(); //console.log(points)\n    }\n  };\n\n  canvas.onmouseup = e => {\n    //не нажата\n    paths.push(points);\n    points = [];\n  };\n\n  canvas.onmousedown = e => {\n    //нажата\n    paths = [];\n    let x = e.offsetX;\n    let y = e.offsetY;\n    let dx = e.movementX;\n    let dy = e.movementY;\n    points.push({\n      x: x - dx,\n      y: y - dy\n    });\n  };\n};\n\nconst drawPaths = canvas => {\n  let ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, canvas.width, canvas.height); // draw all the paths in the paths array\n\n  paths.forEach(path => {\n    ctx.beginPath();\n    ctx.moveTo(path[0].x, path[0].y);\n\n    for (let i = 1; i < path.length; i++) {\n      ctx.lineTo(path[i].x, path[i].y);\n    }\n\n    ctx.stroke();\n  });\n};\n\nconst Canvas = props => {\n  _s();\n\n  let [color, setColor] = useState('black');\n  let [gallery, setImage] = useState([]); //let [points, setPoint] = useState([]);\n\n  const canvasRef = useRef(null);\n\n  const onChangeColor = color => {\n    setColor(color);\n  };\n\n  const save = () => {\n    const canvas = canvasRef.current;\n    let size = localStorage.length;\n    let dataURL = canvas.toDataURL(\"image/png\", 1.0);\n    localStorage.setItem(`gallery${size + 1}`, dataURL);\n    addNewImg(dataURL);\n  };\n\n  const clear = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    points = [];\n  };\n\n  const eraser = () => {\n    const canvas = canvasRef.current;\n    draw(canvas, \"rgb(255, 255, 255, 1)\", 'eraser');\n  };\n\n  const addNewImg = dataURL => {\n    setImage([...gallery, /*#__PURE__*/_jsxDEV(\"img\", {\n      src: dataURL,\n      className: styles.picture\n    }, dataURL, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 31\n    }, this)]);\n  };\n\n  const undo = () => {\n    const canvas = canvasRef.current;\n    paths.splice(-1, 1);\n    drawPaths(canvas);\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    draw(canvas, color, 'line');\n  }, [draw, color, gallery]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.gallery,\n      children: gallery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas\",\n      width: \"450\",\n      height: \"450\",\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n      clear: clear,\n      save: save,\n      eraser: eraser,\n      undo: undo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Palette, {\n      onChangeColor: onChangeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n}; // <Buttons clear={clear(canvasRef.getContext('2d'))} />\n\n\n_s(Canvas, \"mmReg72U4XcRSkNyFAFuIkz5o1U=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js"],"names":["React","useRef","useEffect","Fragment","useState","Palette","Buttons","styles","paths","points","draw","canvas","color","mode","context","getContext","onmousemove","drawIfPressed","e","x","offsetX","y","offsetY","dx","movementX","dy","movementY","globalCompositeOperation","lineCap","lineWidth","buttons","beginPath","moveTo","lineTo","stroke","strokeStyle","closePath","onmouseup","push","onmousedown","drawPaths","ctx","clearRect","width","height","forEach","path","i","length","Canvas","props","setColor","gallery","setImage","canvasRef","onChangeColor","save","current","size","localStorage","dataURL","toDataURL","setItem","addNewImg","clear","eraser","picture","undo","splice"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Buttons from '../Buttons';\nimport styles from '../Gallery.module.css';\nlet paths = [], points = [];\nconst draw = (canvas, color, mode) => {\n    let context = canvas.getContext('2d');\n    canvas.onmousemove = function drawIfPressed (e) {\n        let x = e.offsetX;\n        let y = e.offsetY;\n        let dx = e.movementX;\n        let dy = e.movementY;\n        context.globalCompositeOperation = mode==='line'? \"source-over\": \"destination-out\";\n        context.lineCap = \"round\";\n        context.lineWidth = 8;\n        if (e.buttons > 0) {\n          context.beginPath();\n          context.moveTo(x, y);\n          context.lineTo(x - dx, y - dy);\n          context.stroke();\n          context.strokeStyle = color;\n          context.closePath();\n          //console.log(points)\n        }\n    };\n    canvas.onmouseup = (e) => {//не нажата\n        paths.push(points);\n        points=[];\n    };\n    canvas.onmousedown = (e)=>{//нажата\n        paths=[];\n        let x = e.offsetX;\n        let y = e.offsetY;\n        let dx = e.movementX;\n        let dy = e.movementY;\n        points.push({x:x-dx, y:y-dy})\n    };\n}\nconst drawPaths=(canvas)=> {\n    let ctx = canvas.getContext('2d');\n    ctx.clearRect(0,0,canvas.width,canvas.height);\n  // draw all the paths in the paths array\n    paths.forEach(path=>{\n    ctx.beginPath();\n    ctx.moveTo(path[0].x,path[0].y);  \n    for(let i = 1; i < path.length; i++){\n        ctx.lineTo(path[i].x,path[i].y); \n    }\n    ctx.stroke();\n    })\n};\n\nconst Canvas = props => {\n    let [color, setColor] = useState('black');\n    let [gallery, setImage] = useState([]);\n    //let [points, setPoint] = useState([]);\n    const canvasRef = useRef(null);\n    const onChangeColor = color => {\n        setColor(color);\n    };\n    const save = () => {\n        const canvas = canvasRef.current\n        let size = localStorage.length;\n        let dataURL = canvas.toDataURL(\"image/png\", 1.0);\n        localStorage.setItem(`gallery${size+1}`, dataURL)\n        addNewImg(dataURL); \n    };\n    const clear = () => {\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        points=[];\n    };\n    const eraser = () => {\n        const canvas = canvasRef.current\n        draw(canvas,\"rgb(255, 255, 255, 1)\",'eraser');\n    };\n    const addNewImg = (dataURL) => {\n        setImage([...gallery, <img key={dataURL} src={dataURL} className={styles.picture}/>]);\n    }\n    const undo = () => {\n        const canvas = canvasRef.current\n        paths.splice(-1,1);\n        drawPaths(canvas);\n    }\n    useEffect(() => {\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d');\n        draw(canvas, color,'line');\n    }, [draw, color, gallery])\n  \n  return <Fragment>\n    <div className={styles.gallery}>{gallery}</div>\n    <canvas id='canvas' width='450' height='450' ref={canvasRef} {...props}/>\n    <Buttons clear={clear} save ={save} eraser={eraser} undo={undo}/>\n    <Palette onChangeColor={onChangeColor}></Palette>\n  </Fragment> \n}\n// <Buttons clear={clear(canvasRef.getContext('2d'))} />\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}