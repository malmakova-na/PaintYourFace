{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Button from '../Buttons';\nimport LineWidthBar from '../LineWidthBar';\nimport GalleryItem from '../addNewImage';\nimport DeleteButton from '../DeleteButton';\nimport LoadImage from '../LoadImage';\nimport styles from '../Gallery.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useLocalStorage(arr) {\n  _s();\n\n  //console.log(typeof [])\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    //let arr =[];\n    if (localStorage.length !== 0) {\n      for (let j = 1; j <= localStorage.length; j++) {\n        let dataURL = localStorage.getItem(`gallery${j}`); // console.log(typeof dataURL)\n\n        arr.push({\n          key: `gallery${j}`,\n          value: dataURL\n        });\n      }\n    } //console.log(arr)\n\n\n    return arr;\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    // Allow value to be a function so we have same API as useState\n    console.log(value);\n    const valueToStore = value instanceof Function ? value(storedValue.value) : value; // Save state\n\n    setStoredValue(valueToStore.value);\n    let size = localStorage.length; // Save to local storage\n\n    window.localStorage.setItem(`gallery${size + 1}`, valueToStore); //arr.push({key:`gallery${size+1}`,value: valueToStore});\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"9cGOO9eFe2JQXxELIyhLm+eHMKY=\");\n\nconst Canvas = props => {\n  _s2();\n\n  let [color, setColor] = useState('black');\n  let [gallery, setImage] = useLocalStorage([]);\n  let [paths, setPath] = useState([]);\n  let [lineWidth, setLineWidth] = useState(2);\n  let [toggleItem, setToggle] = useState([]);\n  const canvasRef = useRef(null);\n\n  const draw = (canvas, color, mode) => {\n    let rememberPath = false;\n    let points = [];\n    let context = canvas.getContext('2d');\n    context.globalCompositeOperation = mode === 'line' ? \"source-over\" : \"destination-out\";\n\n    canvas.onmousemove = function drawIfPressed(e) {\n      let x = e.offsetX;\n      let y = e.offsetY;\n      let dx = e.movementX;\n      let dy = e.movementY;\n      context.lineCap = \"round\";\n      context.lineWidth = lineWidth;\n\n      if (e.buttons > 0) {\n        context.beginPath();\n        context.moveTo(x, y);\n        context.lineTo(x - dx, y - dy);\n        context.stroke();\n        context.strokeStyle = color;\n        context.closePath();\n      }\n\n      if (rememberPath) {\n        points.push({\n          x: x - dx,\n          y: y - dy,\n          color: color,\n          lineWidth: lineWidth\n        });\n      }\n    };\n\n    canvas.onmouseup = e => {\n      //не нажата\n      setPath([...paths, points]);\n      rememberPath = false;\n    };\n\n    canvas.onmousedown = e => {\n      //нажата\n      let x = e.offsetX;\n      let y = e.offsetY;\n      let dx = e.movementX;\n      let dy = e.movementY;\n      points = [];\n      rememberPath = true;\n      points.push({\n        x: x - dx,\n        y: y - dy\n      });\n    };\n  };\n\n  const drawPaths = canvas => {\n    let context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    paths.forEach(path => {\n      context.beginPath();\n      context.moveTo(path[0].x, path[0].y);\n\n      for (let i = 1; i < path.length; i++) {\n        context.lineTo(path[i].x, path[i].y);\n        context.strokeStyle = path[i].color;\n        context.lineWidth = path[i].lineWidth;\n      }\n\n      context.stroke();\n    });\n  };\n  /*const showGallery = () => {\n      if(localStorage.length !==0){\n          for(let j = 1; j <= localStorage.length; j++){\n              let dataURL = localStorage.getItem(`gallery${j}`);\n              addNewImg(dataURL); \n          }\n      } \n  };*/\n\n\n  const onChangeLineWidth = width => setLineWidth(width);\n\n  const onChangeColor = color => setColor(color);\n\n  const save = () => {\n    const canvas = canvasRef.current;\n    let size = localStorage.length;\n    let dataURL = canvas.toDataURL(\"image/png\", 1.0);\n\n    if (localStorage.getItem(`gallery${size}`) !== dataURL) {\n      //картинку сохраняем один раз\n      setImage([...gallery, {\n        value: `gallery${size + 1}`,\n        value: dataURL\n      }]); //addNewImg(dataURL); \n      //setImage([...gallery,dataURL]);\n      //setImage(dataURL);\n\n      console.log('gallery', gallery);\n    }\n  };\n\n  const clear = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    setPath([]);\n  };\n\n  const eraser = () => {\n    const canvas = canvasRef.current;\n    draw(canvas, \"rgb(255, 255, 255, 1)\", 'eraser');\n  };\n\n  const undo = () => {\n    const canvas = canvasRef.current;\n    paths.splice(-1, 1);\n    drawPaths(canvas);\n  };\n\n  const toggleStyle = value => {\n    setToggle(value);\n  };\n\n  const addNewImg = dataURL => {\n    setImage([...gallery, dataURL]);\n  };\n  /*const onDelete= (dataURL) => setImage(prevActions => (\n      prevActions.filter((value, i) => value !== dataURL)\n    ));*/\n\n\n  const onDelete = key => {\n    localStorage.removeItem(key);\n  };\n\n  useEffect(() => {\n    //showGallery();\n    const canvas = canvasRef.current;\n    draw(canvas, color, 'line');\n  }, [draw, color, gallery]); //, lineWidth, toggleStyle\n\n  /*const geyGallery =()=> {\n      return Object.keys(localStorage).forEach((key, index) =><div className={styles.block} key={localStorage.getItem(key)}>\n          <GalleryItem key={localStorage.getItem(key)+index}  src={localStorage.getItem(key)}  onClick={toggleStyle} active={(localStorage.getItem(key)) === toggleItem}/>\n          <DeleteButton id={localStorage.getItem(key)} onClick={onDelete} className={styles.deleteButton}/>\n          </div>\n      )\n  }*/\n\n  const w = gallery.map(item => {\n    console.log('item ', item);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.block,\n      children: [/*#__PURE__*/_jsxDEV(GalleryItem, {\n        src: item.value,\n        onClick: toggleStyle,\n        active: item.value === toggleItem\n      }, item.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n        id: item.value,\n        onClick: onDelete,\n        className: styles.deleteButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 5\n      }, this)]\n    }, item.key, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.gallery,\n      children: w\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: styles.canvas,\n      width: \"450\",\n      height: \"450\",\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(LineWidthBar, {\n      onChangeLineWidth: onChangeLineWidth,\n      value: lineWidth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: save,\n        id: 'save',\n        text: 'сохранить'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: eraser,\n        id: 'eraser',\n        text: 'ластик'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: clear,\n        id: 'clear',\n        text: 'clear'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: undo,\n        id: 'undo',\n        text: 'undo'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Palette, {\n      onChangeColor: onChangeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(Canvas, \"ZNE/CNwlA2mkfbS8LCbPW98ggoY=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = Canvas;\nexport default Canvas; //<LoadImage addNewImg={addNewImg} />\n\n/*\n gallery.map((item, index)=><div className={styles.block} key={item}>\n        <GalleryItem key={item+index}  src={item}  onClick={toggleStyle} active={(item) === toggleItem}/>\n        <DeleteButton id={item} onClick={onDelete} className={styles.deleteButton}/>\n        </div>)\n*/\n\n/*gallery.map((item, index)=><div className={styles.block} key={item}>\n       <GalleryItem key={item+index}  src={item}  onClick={toggleStyle} active={(item) === toggleItem}/>\n       <DeleteButton id={item} onClick={onDelete} className={styles.deleteButton}/>\n       </div>) */\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js"],"names":["React","useRef","useEffect","Fragment","useState","Palette","Button","LineWidthBar","GalleryItem","DeleteButton","LoadImage","styles","useLocalStorage","arr","storedValue","setStoredValue","localStorage","length","j","dataURL","getItem","push","key","value","setValue","console","log","valueToStore","Function","size","window","setItem","Canvas","props","color","setColor","gallery","setImage","paths","setPath","lineWidth","setLineWidth","toggleItem","setToggle","canvasRef","draw","canvas","mode","rememberPath","points","context","getContext","globalCompositeOperation","onmousemove","drawIfPressed","e","x","offsetX","y","offsetY","dx","movementX","dy","movementY","lineCap","buttons","beginPath","moveTo","lineTo","stroke","strokeStyle","closePath","onmouseup","onmousedown","drawPaths","clearRect","width","height","forEach","path","i","onChangeLineWidth","onChangeColor","save","current","toDataURL","clear","eraser","undo","splice","toggleStyle","addNewImg","onDelete","removeItem","w","map","item","block","deleteButton"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Button from '../Buttons';\nimport LineWidthBar from '../LineWidthBar';\nimport GalleryItem from '../addNewImage';\nimport DeleteButton from '../DeleteButton';\nimport LoadImage from '../LoadImage';\n\nimport styles from '../Gallery.module.css';\n\nfunction useLocalStorage(arr) {\n    //console.log(typeof [])\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n        //let arr =[];\n        if(localStorage.length !== 0){\n            for(let j = 1; j <= localStorage.length; j++){\n                let dataURL = localStorage.getItem(`gallery${j}`);\n               // console.log(typeof dataURL)\n                arr.push({key:`gallery${j}`,value: dataURL}); \n            }\n        } \n        //console.log(arr)\n        return arr;\n    });\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value) => {\n        // Allow value to be a function so we have same API as useState\n        console.log(value)\n        const valueToStore =\n            value instanceof Function ? value(storedValue.value) : value;\n        // Save state\n        setStoredValue(valueToStore.value);\n        let size = localStorage.length;\n        // Save to local storage\n        window.localStorage.setItem(`gallery${size+1}`, valueToStore);\n        //arr.push({key:`gallery${size+1}`,value: valueToStore});\n      \n    };\n    return [storedValue, setValue];\n  }\nconst Canvas = props => {\n    let [color, setColor] = useState('black');\n    let [gallery, setImage] = useLocalStorage([]);\n   \n    \n    let [paths, setPath] = useState([]);\n    let [lineWidth, setLineWidth] = useState(2);\n    let [toggleItem, setToggle] = useState([]);\n    const canvasRef = useRef(null);\n    const draw = (canvas, color, mode) => {\n        let rememberPath = false;\n        let points = [];\n        let context = canvas.getContext('2d');\n        context.globalCompositeOperation = mode ==='line'? \"source-over\": \"destination-out\";\n        canvas.onmousemove = function drawIfPressed (e) {\n            let x = e.offsetX;\n            let y = e.offsetY;\n            let dx = e.movementX;\n            let dy = e.movementY;\n            context.lineCap = \"round\";\n            context.lineWidth = lineWidth;\n            if (e.buttons > 0) {\n              context.beginPath();\n              context.moveTo(x, y);\n              context.lineTo(x - dx, y - dy);\n              context.stroke();\n              context.strokeStyle = color;\n              context.closePath();\n            }\n            if(rememberPath){\n                points.push({x:x-dx, y:y-dy, color: color, lineWidth: lineWidth})\n            }\n        };\n        canvas.onmouseup = (e) => {//не нажата\n            setPath([...paths, points])\n            rememberPath = false;\n        };\n        canvas.onmousedown = (e)=>{//нажата\n            let x = e.offsetX;\n            let y = e.offsetY;\n            let dx = e.movementX;\n            let dy = e.movementY;\n            points = [];\n            rememberPath = true;\n            points.push({x:x-dx,y:y-dy})\n        };\n    }\n    \n    const drawPaths = (canvas)=> {\n        let context = canvas.getContext('2d');\n        context.clearRect(0,0,canvas.width,canvas.height);\n        paths.forEach(path=>{\n        context.beginPath();\n        context.moveTo(path[0].x,path[0].y); \n        for(let i = 1; i < path.length; i++){\n            context.lineTo(path[i].x,path[i].y); \n            context.strokeStyle = path[i].color;\n            context.lineWidth = path[i].lineWidth;\n        }\n        context.stroke();\n        })\n    };\n\n    /*const showGallery = () => {\n        if(localStorage.length !==0){\n            for(let j = 1; j <= localStorage.length; j++){\n                let dataURL = localStorage.getItem(`gallery${j}`);\n                addNewImg(dataURL); \n            }\n        } \n    };*/\n\n    const onChangeLineWidth = width => setLineWidth(width); \n    const onChangeColor = color => setColor(color);\n    const save = () => {\n        const canvas = canvasRef.current;\n        let size = localStorage.length;\n        let dataURL = canvas.toDataURL(\"image/png\", 1.0);\n        if(localStorage.getItem(`gallery${size}`) !== dataURL){//картинку сохраняем один раз\n            setImage([...gallery,{value:`gallery${size+1}`,value: dataURL}])\n            //addNewImg(dataURL); \n            //setImage([...gallery,dataURL]);\n            //setImage(dataURL);\n            console.log('gallery', gallery)\n        }\n    };\n    const clear = () => {\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        setPath([]);\n    };\n    const eraser = () => {\n        const canvas = canvasRef.current\n        draw(canvas,\"rgb(255, 255, 255, 1)\",'eraser');\n    };\n    const undo = () => {\n        const canvas = canvasRef.current;\n        paths.splice(-1,1);\n        drawPaths(canvas);\n    }\n\n    \n    \n\n    const toggleStyle = (value) => {\n        setToggle(value);\n    };\n    const addNewImg = (dataURL) => {\n       setImage([...gallery, dataURL]);\n    } \n    /*const onDelete= (dataURL) => setImage(prevActions => (\n        prevActions.filter((value, i) => value !== dataURL)\n      ));*/\n      const onDelete= (key) => {\n        localStorage.removeItem(key);\n      };  \n\n    useEffect(() => {\n        //showGallery();\n        const canvas = canvasRef.current;\n        draw(canvas, color,'line');\n    }, [draw, color, gallery]);\n//, lineWidth, toggleStyle\n/*const geyGallery =()=> {\n    return Object.keys(localStorage).forEach((key, index) =><div className={styles.block} key={localStorage.getItem(key)}>\n        <GalleryItem key={localStorage.getItem(key)+index}  src={localStorage.getItem(key)}  onClick={toggleStyle} active={(localStorage.getItem(key)) === toggleItem}/>\n        <DeleteButton id={localStorage.getItem(key)} onClick={onDelete} className={styles.deleteButton}/>\n        </div>\n    )\n}*/\nconst w =gallery.map((item)=>{\n    console.log('item ', item)\n    return <div className={styles.block} key={item.key}>\n    <GalleryItem key={item.value}  src={item.value}  onClick={toggleStyle} active={(item.value) === toggleItem}/>\n    <DeleteButton id={item.value} onClick={onDelete} className={styles.deleteButton}/>\n</div>})\n  \n  return <Fragment>\n    <div className={styles.gallery}>\n        {w}\n       </div>\n    \n    <canvas className={styles.canvas} width='450' height='450' ref={canvasRef} {...props}/>\n    <LineWidthBar onChangeLineWidth={onChangeLineWidth} value={lineWidth}/> \n    <div>\n        <Button onClick={save} id={'save'} text={'сохранить'}/>\n        <Button onClick={eraser} id={'eraser'} text={'ластик'}/>\n        <Button onClick={clear} id={'clear'} text={'clear'}/>\n        <Button onClick={undo} id={'undo'} text={'undo'}/>\n    </div>\n    <Palette onChangeColor={onChangeColor}></Palette>\n  </Fragment> \n}\nexport default Canvas;\n//<LoadImage addNewImg={addNewImg} />\n/*\n gallery.map((item, index)=><div className={styles.block} key={item}>\n        <GalleryItem key={item+index}  src={item}  onClick={toggleStyle} active={(item) === toggleItem}/>\n        <DeleteButton id={item} onClick={onDelete} className={styles.deleteButton}/>\n        </div>)\n*/\n/*gallery.map((item, index)=><div className={styles.block} key={item}>\n       <GalleryItem key={item+index}  src={item}  onClick={toggleStyle} active={(item) === toggleItem}/>\n       <DeleteButton id={item} onClick={onDelete} className={styles.deleteButton}/>\n       </div>) */"]},"metadata":{},"sourceType":"module"}