{"ast":null,"code":"import * as THREE from 'three';\nimport TRIANGULATION from './triangulation';\nimport positionBufferData from './positionBufferData';\nimport uvs from './frontProjectionUVMap';\nexport default class FacePaint {\n  static get EYE_VERTICES() {\n    return [// LEFT EYE\n    133, 173, 157, 158, 159, 160, 161, 246, 33, 7, 163, 144, 145, 153, 154, 155, // RIGHT EYE\n    362, 398, 384, 385, 386, 387, 388, 466, 263, 249, 390, 373, 374, 380, 381, 382];\n  }\n\n  _addCamera() {\n    this._camera = new THREE.OrthographicCamera(this._halfW, -this._halfW, -this._halfH, this._halfH, 1, 1000);\n    this._camera.position.x = this._halfW;\n    this._camera.position.y = this._halfH;\n    this._camera.position.z = -600;\n\n    this._camera.lookAt(this._halfW, this._halfH, 0);\n  }\n\n  set blendMode(val) {\n    this._renderer.domElement.style.mixBlendMode = val;\n  }\n\n  _addLights() {\n    const light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.1);\n\n    this._scene.add(light);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(this._halfW, this._halfH * 0.5, -1000).normalize();\n\n    this._scene.add(directionalLight);\n  }\n\n  _addGeometry() {\n    this._geometry = new THREE.BufferGeometry(); // const EV = FacePaint.EYE_VERTICES;\n    // for(let i = TRIANGULATION.length - 1; i > -1; i-=3) {\n    //   const a = TRIANGULATION[i];\n    //   const b = TRIANGULATION[i - 1];\n    //   const c = TRIANGULATION[i - 2];\n    //   if(EV.indexOf(a) !== -1 ||\n    //      EV.indexOf(b) !== -1 ||\n    //      EV.indexOf(c) !== -1) {\n    //     TRIANGULATION.splice(i - 2, 3);\n    //   }\n    // }\n\n    this._geometry.setIndex(TRIANGULATION);\n\n    this._geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionBufferData, 3));\n\n    this._geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n\n    this._geometry.computeVertexNormals();\n  }\n\n  _addMaterial() {\n    this._textureLoader = new THREE.TextureLoader();\n\n    const texture = this._textureLoader.load(this._textureFilePath); // set the \"color space\" of the texture\n\n\n    texture.encoding = THREE.sRGBEncoding; // reduce blurring at glancing angles\n\n    texture.anisotropy = 16;\n    const alpha = 0.4;\n    const beta = 0.5;\n    this._material = new THREE.MeshPhongMaterial({\n      map: texture,\n      color: new THREE.Color(0xffffff),\n      specular: new THREE.Color(beta * 0.2, beta * 0.2, beta * 0.2),\n      reflectivity: beta,\n      shininess: Math.pow(2, alpha * 10)\n    });\n  }\n\n  _setupScene() {\n    this._scene = new THREE.Scene();\n\n    this._addCamera();\n\n    this._addLights();\n\n    this._addGeometry();\n\n    this._addMaterial();\n\n    this._mesh = new THREE.Mesh(this._geometry, this._material);\n\n    this._scene.add(this._mesh);\n  }\n\n  async updateTexture(url, isVideo) {\n    let texture;\n\n    if (this._video) {\n      this._video.pause();\n    }\n\n    if (isVideo) {\n      this._video = document.querySelector(`video[src=\"${url}\"]`);\n\n      this._video.play();\n\n      texture = new THREE.VideoTexture(this._video);\n      texture.minFilter = THREE.NearestFilter;\n      texture.magFilter = THREE.LinearFilter;\n    } else {\n      texture = await this._textureLoader.loadAsync(url);\n    }\n\n    this._material.map = texture;\n  }\n\n  render(positionBufferData) {\n    this._geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionBufferData, 3));\n\n    this._geometry.attributes.position.needsUpdate = true;\n\n    this._renderer.render(this._scene, this._camera);\n  }\n\n  constructor({\n    id,\n    textureFilePath,\n    w,\n    h\n  }) {\n    this._renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      canvas: document.querySelector(`#${id}`)\n    });\n\n    this._renderer.setPixelRatio(window.devicePixelRatio);\n\n    this._renderer.setSize(w, h);\n\n    this._halfW = w * 0.5;\n    this._halfH = h * 0.5;\n    this._textureFilePath = textureFilePath;\n\n    this._setupScene();\n  }\n\n}","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/FaceMash/FacePaint.js"],"names":["THREE","TRIANGULATION","positionBufferData","uvs","FacePaint","EYE_VERTICES","_addCamera","_camera","OrthographicCamera","_halfW","_halfH","position","x","y","z","lookAt","blendMode","val","_renderer","domElement","style","mixBlendMode","_addLights","light","HemisphereLight","_scene","add","directionalLight","DirectionalLight","set","normalize","_addGeometry","_geometry","BufferGeometry","setIndex","setAttribute","Float32BufferAttribute","computeVertexNormals","_addMaterial","_textureLoader","TextureLoader","texture","load","_textureFilePath","encoding","sRGBEncoding","anisotropy","alpha","beta","_material","MeshPhongMaterial","map","color","Color","specular","reflectivity","shininess","Math","pow","_setupScene","Scene","_mesh","Mesh","updateTexture","url","isVideo","_video","pause","document","querySelector","play","VideoTexture","minFilter","NearestFilter","magFilter","LinearFilter","loadAsync","render","attributes","needsUpdate","constructor","id","textureFilePath","w","h","WebGLRenderer","antialias","canvas","setPixelRatio","window","devicePixelRatio","setSize"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport TRIANGULATION from './triangulation'\nimport positionBufferData from './positionBufferData'\nimport uvs from './frontProjectionUVMap'\n\nexport default class FacePaint {\n\tstatic get EYE_VERTICES() {\n\t  return [\n\t\t// LEFT EYE\n\t\t133, 173, 157, 158, \n\t\t159, 160, 161, 246,  \n\t\t33,   7, 163, 144, \n\t\t145, 153, 154, 155, \n\t\t// RIGHT EYE\n\t\t362, 398, 384, 385, \n\t\t386, 387, 388, 466, \n\t\t263, 249, 390, 373,\n\t\t374, 380, 381, 382\n\t  ];\n\t}\n\t  _addCamera() {\n\t\t  this._camera = new THREE.OrthographicCamera(\n\t\t\t  this._halfW,\n\t\t\t  -this._halfW,\n\t\t\t  -this._halfH,\n\t\t\t  this._halfH,\n\t\t\t  1, 1000\n\t\t  );\n\t\t  this._camera.position.x = this._halfW;\n\t\t  this._camera.position.y = this._halfH;\n\t\t  this._camera.position.z = -600;\n\t\t  this._camera.lookAt(\n\t\t\t  this._halfW,\n\t\t\t  this._halfH,\n\t\t\t  0\n\t\t  );\n\t  }\n\t\n\tset blendMode(val) {\n\t  this._renderer.domElement.style.mixBlendMode = val;\n\t}\n  \n\t  _addLights() {\n\t\t  const light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.1);\n\t\t  this._scene.add(light);\n\t\t  const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n\t\t  directionalLight.position.set(this._halfW, this._halfH * 0.5, -1000).normalize();\n\t\t  this._scene.add(directionalLight);\n\t  }\n  \n\t  _addGeometry() {\n\t\t  this._geometry = new THREE.BufferGeometry();\n\t  // const EV = FacePaint.EYE_VERTICES;\n\t  // for(let i = TRIANGULATION.length - 1; i > -1; i-=3) {\n\t  //   const a = TRIANGULATION[i];\n\t  //   const b = TRIANGULATION[i - 1];\n\t  //   const c = TRIANGULATION[i - 2];\n\t  //   if(EV.indexOf(a) !== -1 ||\n\t  //      EV.indexOf(b) !== -1 ||\n\t  //      EV.indexOf(c) !== -1) {\n\t  //     TRIANGULATION.splice(i - 2, 3);\n\t  //   }\n\t  // }\n\t\t  this._geometry.setIndex(TRIANGULATION);\n\t\t  this._geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionBufferData, 3));\n\t\t  this._geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n\t\t  this._geometry.computeVertexNormals();\n\t  }\n  \n\t  _addMaterial() {\n\t\t  this._textureLoader = new THREE.TextureLoader();\n\t\t  const texture = this._textureLoader.load(this._textureFilePath);\n\t\t  // set the \"color space\" of the texture\n\t\t  texture.encoding = THREE.sRGBEncoding;\n  \n\t\t  // reduce blurring at glancing angles\n\t\t  texture.anisotropy = 16;\n\t\t  const alpha = 0.4;\n\t\t  const beta = 0.5;\n\t\t  this._material = new THREE.MeshPhongMaterial({\n\t\t\t  map: texture,\n\t\t\t  color: new THREE.Color(0xffffff),\n\t\t\t  specular: new THREE.Color(beta * 0.2, beta * 0.2, beta * 0.2),\n\t\t\t  reflectivity: beta,\n\t\t\t  shininess: Math.pow(2, alpha * 10),\n\t\t  });\n\t  }\n  \n\t  _setupScene() {\n\t\t  this._scene = new THREE.Scene();\n\t\t  this._addCamera();\n\t\t  this._addLights();\n\t\t  this._addGeometry();\n\t\t  this._addMaterial();\n\t\t  this._mesh = new THREE.Mesh(this._geometry, this._material);\n\t\t  this._scene.add(this._mesh);\n\t  }\n\t\n\tasync updateTexture(url, isVideo) {\n\t\t  let texture;\n\t\t  if(this._video) {\n\t\t\t  this._video.pause();\n\t\t  }\n\t\t  if(isVideo) {\n\t\t\t  this._video = document.querySelector(`video[src=\"${url}\"]`);\n\t\t\t  this._video.play();\n\t\t\t  texture = new THREE.VideoTexture( this._video );\n\t\t\t  texture.minFilter = THREE.NearestFilter;\n\t\t\t  texture.magFilter = THREE.LinearFilter;\n\t\t  } else {\n\t\t\t  texture = await this._textureLoader.loadAsync(url);\t\n\t\t  }\n\t\t  \n\t\t  this._material.map = texture;\n\t  }\n  \n\t  render(positionBufferData) {\n  \n\t\t  this._geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionBufferData, 3));\n\t\t  this._geometry.attributes.position.needsUpdate = true;\n  \n\t\t  this._renderer.render(this._scene, this._camera);\n  \n\t  }\n  \n\t  constructor({\n\t  id,\n\t\t  textureFilePath,\n\t\t  w,\n\t\t  h\n\t  }) {\n\t\t  this._renderer = new THREE.WebGLRenderer({\n\t\t\t  antialias: true,\n\t\t\t  alpha: true,\n\t\t\t  canvas: document.querySelector(`#${id}`)\n\t\t  });\n\t\t  this._renderer.setPixelRatio(window.devicePixelRatio);\n\t\t  this._renderer.setSize(w, h);\n\t\t  this._halfW = w * 0.5;\n\t\t  this._halfH = h * 0.5;\n\t\t  this._textureFilePath = textureFilePath;\n\t\t  this._setupScene();\n\t  }\n  }"]},"metadata":{},"sourceType":"module"}