{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Button from '../Buttons';\nimport LineWidthBar from '../LineWidthBar';\nimport GalleryItem from '../addNewImage';\nimport DeleteButton from '../DeleteButton';\nimport LoadImage from '../LoadImage';\nimport styles from '../Gallery.module.css';\n/*function ocalStorage() {\n    //console.log(typeof [])\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n        let gallery = JSON.parse(localStorage.getItem('gallery')) || [];\n        return gallery;\n        //let arr =[];\n       // if(localStorage.length !== 0){\n            for(let j = 1; j <= localStorage.length; j++){\n                let dataURL = localStorage.getItem(`gallery${j}`);\n               // console.log(typeof dataURL)\n                //console.log(localStorage)\n                arr.push(dataURL); \n            }\n       //     Object.keys(localStorage).forEach(key => arr.push(localStorage.getItem(key)));\n       // } \n        //console.log(arr)\n       // return localStorage;\n    });\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value) => {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore =\n            value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        let size = localStorage.length;\n        // Save to local storage\n        window.localStorage.setItem(`gallery${size+1}`, valueToStore);\n      \n    };\n    return [storedValue, setValue];\n  };*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useLocalStorage(key, initialValue) {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"VRW7tDGwg2yp4OkV7Hg5PaXH9+I=\");\n\nconst Canvas = props => {\n  _s2();\n\n  let [color, setColor] = useState('black');\n  let [gallery, setImage] = useLocalStorage('gallery', []);\n  let [paths, setPath] = useState([]);\n  let [lineWidth, setLineWidth] = useState(2);\n  let [toggleItem, setToggle] = useState([]);\n  const canvasRef = useRef(null);\n\n  const draw = (canvas, color, mode) => {\n    let rememberPath = false;\n    let points = [];\n    let context = canvas.getContext('2d');\n    context.globalCompositeOperation = mode === 'line' ? \"source-over\" : \"destination-out\";\n\n    canvas.onmousemove = function drawIfPressed(e) {\n      let x = e.offsetX;\n      let y = e.offsetY;\n      let dx = e.movementX;\n      let dy = e.movementY;\n      context.lineCap = \"round\";\n      context.lineWidth = lineWidth;\n\n      if (e.buttons > 0) {\n        context.beginPath();\n        context.moveTo(x, y);\n        context.lineTo(x - dx, y - dy);\n        context.stroke();\n        context.strokeStyle = color;\n        context.closePath();\n      }\n\n      if (rememberPath) {\n        points.push({\n          x: x - dx,\n          y: y - dy,\n          color: color,\n          lineWidth: lineWidth\n        });\n      }\n    };\n\n    canvas.onmouseup = e => {\n      //не нажата\n      setPath([...paths, points]);\n      rememberPath = false;\n    };\n\n    canvas.onmousedown = e => {\n      //нажата\n      let x = e.offsetX;\n      let y = e.offsetY;\n      let dx = e.movementX;\n      let dy = e.movementY;\n      points = [];\n      rememberPath = true;\n      points.push({\n        x: x - dx,\n        y: y - dy\n      });\n    };\n  };\n\n  const drawPaths = canvas => {\n    let context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    paths.forEach(path => {\n      context.beginPath();\n      context.moveTo(path[0].x, path[0].y);\n\n      for (let i = 1; i < path.length; i++) {\n        context.lineTo(path[i].x, path[i].y);\n        context.strokeStyle = path[i].color;\n        context.lineWidth = path[i].lineWidth;\n      }\n\n      context.stroke();\n    });\n  };\n  /*const showGallery = () => {\n      if(localStorage.length !==0){\n          for(let j = 1; j <= localStorage.length; j++){\n              let dataURL = localStorage.getItem(`gallery${j}`);\n              addNewImg(dataURL); \n          }\n      } \n  };*/\n\n\n  const onChangeLineWidth = width => setLineWidth(width);\n\n  const onChangeColor = color => setColor(color);\n\n  const save = () => {\n    const canvas = canvasRef.current;\n    let size = localStorage.length;\n    let dataURL = canvas.toDataURL(\"image/png\", 1.0); //if(localStorage.getItem(`gallery${size}`) !== dataURL){//картинку сохраняем один раз\n    //  localStorage.setItem(`gallery${size+1}`, dataURL)\n    //addNewImg(dataURL); \n\n    setImage([...gallery, dataURL]); //setImage(dataURL)\n    //console.log('gallery', gallery)\n    //}\n  };\n\n  const clear = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    setPath([]);\n  };\n\n  const eraser = () => {\n    const canvas = canvasRef.current;\n    draw(canvas, \"rgb(255, 255, 255, 1)\", 'eraser');\n  };\n\n  const undo = () => {\n    const canvas = canvasRef.current;\n    paths.splice(-1, 1);\n    drawPaths(canvas);\n  };\n\n  const toggleStyle = value => {\n    setToggle(value);\n  };\n\n  const addNewImg = dataURL => {\n    setImage([...gallery, dataURL]);\n  };\n\n  const onDelete = index => {\n    localStorage.removeItem(`gallery${index}`);\n  };\n\n  useEffect(() => {\n    //showGallery();\n    const canvas = canvasRef.current;\n    draw(canvas, color, 'line');\n  }, [draw, color, gallery, localStorage]); //, lineWidth, toggleStyle\n\n  const w = gallery.map((item, index) => {\n    console.log('item ', item);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.block,\n      children: [/*#__PURE__*/_jsxDEV(GalleryItem, {\n        src: item,\n        onClick: toggleStyle,\n        active: item === toggleItem\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n        id: index,\n        onClick: onDelete,\n        className: styles.deleteButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 1\n      }, this)]\n    }, item, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.gallery,\n      children: w\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: styles.canvas,\n      width: \"450\",\n      height: \"450\",\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(LineWidthBar, {\n      onChangeLineWidth: onChangeLineWidth,\n      value: lineWidth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: save,\n        id: 'save',\n        text: 'сохранить'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: eraser,\n        id: 'eraser',\n        text: 'ластик'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: clear,\n        id: 'clear',\n        text: 'clear'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: undo,\n        id: 'undo',\n        text: 'undo'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Palette, {\n      onChangeColor: onChangeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(Canvas, \"ZNE/CNwlA2mkfbS8LCbPW98ggoY=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = Canvas;\nexport default Canvas; //<LoadImage addNewImg={addNewImg} />\n\n/*\n gallery.map((item, index)=><div className={styles.block} key={item}>\n        <GalleryItem key={item+index}  src={item}  onClick={toggleStyle} active={(item) === toggleItem}/>\n        <DeleteButton id={item} onClick={onDelete} className={styles.deleteButton}/>\n        </div>)\n*/\n\n/*gallery.map((item, index)=><div className={styles.block} key={item}>\n       <GalleryItem key={item+index}  src={item}  onClick={toggleStyle} active={(item) === toggleItem}/>\n       <DeleteButton id={item} onClick={onDelete} className={styles.deleteButton}/>\n       </div>) */\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js"],"names":["React","useRef","useEffect","Fragment","useState","Palette","Button","LineWidthBar","GalleryItem","DeleteButton","LoadImage","styles","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify","Canvas","props","color","setColor","gallery","setImage","paths","setPath","lineWidth","setLineWidth","toggleItem","setToggle","canvasRef","draw","canvas","mode","rememberPath","points","context","getContext","globalCompositeOperation","onmousemove","drawIfPressed","e","x","offsetX","y","offsetY","dx","movementX","dy","movementY","lineCap","buttons","beginPath","moveTo","lineTo","stroke","strokeStyle","closePath","push","onmouseup","onmousedown","drawPaths","clearRect","width","height","forEach","path","i","length","onChangeLineWidth","onChangeColor","save","current","size","dataURL","toDataURL","clear","eraser","undo","splice","toggleStyle","addNewImg","onDelete","index","removeItem","w","map","block","deleteButton"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACE,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AAAA;;AAC1C;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,MAAM;AACnD,QAAI;AACF;AACA,YAAMa,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb,CAFE,CAGF;;AACA,aAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;AACD,KALD,CAKE,OAAOS,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOT,YAAP;AACD;AACF,GAX6C,CAA9C,CAH0C,CAe1C;AACA;;AACA,QAAMY,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAI;AACF;AACA,YAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACZ,WAAD,CAAjC,GAAiDY,KADnD,CAFE,CAIF;;AACAX,MAAAA,cAAc,CAACY,YAAD,CAAd,CALE,CAMF;;AACAV,MAAAA,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4BjB,GAA5B,EAAiCQ,IAAI,CAACU,SAAL,CAAeH,YAAf,CAAjC;AACD,KARD,CAQE,OAAOL,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAbD;;AAcA,SAAO,CAACR,WAAD,EAAcW,QAAd,CAAP;AACD;;GAhCQd,e;;AAkCX,MAAMoB,MAAM,GAAGC,KAAK,IAAI;AAAA;;AACpB,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoB/B,QAAQ,CAAC,OAAD,CAAhC;AACA,MAAI,CAACgC,OAAD,EAAUC,QAAV,IAAsBzB,eAAe,CAAC,SAAD,EAAY,EAAZ,CAAzC;AAGA,MAAI,CAAC0B,KAAD,EAAQC,OAAR,IAAmBnC,QAAQ,CAAC,EAAD,CAA/B;AACA,MAAI,CAACoC,SAAD,EAAYC,YAAZ,IAA4BrC,QAAQ,CAAC,CAAD,CAAxC;AACA,MAAI,CAACsC,UAAD,EAAaC,SAAb,IAA0BvC,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMwC,SAAS,GAAG3C,MAAM,CAAC,IAAD,CAAxB;;AACA,QAAM4C,IAAI,GAAG,CAACC,MAAD,EAASZ,KAAT,EAAgBa,IAAhB,KAAyB;AAClC,QAAIC,YAAY,GAAG,KAAnB;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAd;AACAD,IAAAA,OAAO,CAACE,wBAAR,GAAmCL,IAAI,KAAI,MAAR,GAAgB,aAAhB,GAA+B,iBAAlE;;AACAD,IAAAA,MAAM,CAACO,WAAP,GAAqB,SAASC,aAAT,CAAwBC,CAAxB,EAA2B;AAC5C,UAAIC,CAAC,GAAGD,CAAC,CAACE,OAAV;AACA,UAAIC,CAAC,GAAGH,CAAC,CAACI,OAAV;AACA,UAAIC,EAAE,GAAGL,CAAC,CAACM,SAAX;AACA,UAAIC,EAAE,GAAGP,CAAC,CAACQ,SAAX;AACAb,MAAAA,OAAO,CAACc,OAAR,GAAkB,OAAlB;AACAd,MAAAA,OAAO,CAACV,SAAR,GAAoBA,SAApB;;AACA,UAAIe,CAAC,CAACU,OAAF,GAAY,CAAhB,EAAmB;AACjBf,QAAAA,OAAO,CAACgB,SAAR;AACAhB,QAAAA,OAAO,CAACiB,MAAR,CAAeX,CAAf,EAAkBE,CAAlB;AACAR,QAAAA,OAAO,CAACkB,MAAR,CAAeZ,CAAC,GAAGI,EAAnB,EAAuBF,CAAC,GAAGI,EAA3B;AACAZ,QAAAA,OAAO,CAACmB,MAAR;AACAnB,QAAAA,OAAO,CAACoB,WAAR,GAAsBpC,KAAtB;AACAgB,QAAAA,OAAO,CAACqB,SAAR;AACD;;AACD,UAAGvB,YAAH,EAAgB;AACZC,QAAAA,MAAM,CAACuB,IAAP,CAAY;AAAChB,UAAAA,CAAC,EAACA,CAAC,GAACI,EAAL;AAASF,UAAAA,CAAC,EAACA,CAAC,GAACI,EAAb;AAAiB5B,UAAAA,KAAK,EAAEA,KAAxB;AAA+BM,UAAAA,SAAS,EAAEA;AAA1C,SAAZ;AACH;AACJ,KAlBD;;AAmBAM,IAAAA,MAAM,CAAC2B,SAAP,GAAoBlB,CAAD,IAAO;AAAC;AACvBhB,MAAAA,OAAO,CAAC,CAAC,GAAGD,KAAJ,EAAWW,MAAX,CAAD,CAAP;AACAD,MAAAA,YAAY,GAAG,KAAf;AACH,KAHD;;AAIAF,IAAAA,MAAM,CAAC4B,WAAP,GAAsBnB,CAAD,IAAK;AAAC;AACvB,UAAIC,CAAC,GAAGD,CAAC,CAACE,OAAV;AACA,UAAIC,CAAC,GAAGH,CAAC,CAACI,OAAV;AACA,UAAIC,EAAE,GAAGL,CAAC,CAACM,SAAX;AACA,UAAIC,EAAE,GAAGP,CAAC,CAACQ,SAAX;AACAd,MAAAA,MAAM,GAAG,EAAT;AACAD,MAAAA,YAAY,GAAG,IAAf;AACAC,MAAAA,MAAM,CAACuB,IAAP,CAAY;AAAChB,QAAAA,CAAC,EAACA,CAAC,GAACI,EAAL;AAAQF,QAAAA,CAAC,EAACA,CAAC,GAACI;AAAZ,OAAZ;AACH,KARD;AASH,GArCD;;AAuCA,QAAMa,SAAS,GAAI7B,MAAD,IAAW;AACzB,QAAII,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAd;AACAD,IAAAA,OAAO,CAAC0B,SAAR,CAAkB,CAAlB,EAAoB,CAApB,EAAsB9B,MAAM,CAAC+B,KAA7B,EAAmC/B,MAAM,CAACgC,MAA1C;AACAxC,IAAAA,KAAK,CAACyC,OAAN,CAAcC,IAAI,IAAE;AACpB9B,MAAAA,OAAO,CAACgB,SAAR;AACAhB,MAAAA,OAAO,CAACiB,MAAR,CAAea,IAAI,CAAC,CAAD,CAAJ,CAAQxB,CAAvB,EAAyBwB,IAAI,CAAC,CAAD,CAAJ,CAAQtB,CAAjC;;AACA,WAAI,IAAIuB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,IAAI,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAoC;AAChC/B,QAAAA,OAAO,CAACkB,MAAR,CAAeY,IAAI,CAACC,CAAD,CAAJ,CAAQzB,CAAvB,EAAyBwB,IAAI,CAACC,CAAD,CAAJ,CAAQvB,CAAjC;AACAR,QAAAA,OAAO,CAACoB,WAAR,GAAsBU,IAAI,CAACC,CAAD,CAAJ,CAAQ/C,KAA9B;AACAgB,QAAAA,OAAO,CAACV,SAAR,GAAoBwC,IAAI,CAACC,CAAD,CAAJ,CAAQzC,SAA5B;AACH;;AACDU,MAAAA,OAAO,CAACmB,MAAR;AACC,KATD;AAUH,GAbD;AAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,QAAMc,iBAAiB,GAAGN,KAAK,IAAIpC,YAAY,CAACoC,KAAD,CAA/C;;AACA,QAAMO,aAAa,GAAGlD,KAAK,IAAIC,QAAQ,CAACD,KAAD,CAAvC;;AACA,QAAMmD,IAAI,GAAG,MAAM;AACf,UAAMvC,MAAM,GAAGF,SAAS,CAAC0C,OAAzB;AACA,QAAIC,IAAI,GAAGpE,YAAY,CAAC+D,MAAxB;AACA,QAAIM,OAAO,GAAG1C,MAAM,CAAC2C,SAAP,CAAiB,WAAjB,EAA8B,GAA9B,CAAd,CAHe,CAIf;AACE;AACE;;AACApD,IAAAA,QAAQ,CAAC,CAAC,GAAGD,OAAJ,EAAYoD,OAAZ,CAAD,CAAR,CAPW,CAQX;AACA;AACJ;AAEH,GAZD;;AAaA,QAAME,KAAK,GAAG,MAAM;AAChB,UAAM5C,MAAM,GAAGF,SAAS,CAAC0C,OAAzB;AACA,UAAMpC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAhB;AACAD,IAAAA,OAAO,CAAC0B,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB9B,MAAM,CAAC+B,KAA/B,EAAsC/B,MAAM,CAACgC,MAA7C;AACAvC,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH,GALD;;AAMA,QAAMoD,MAAM,GAAG,MAAM;AACjB,UAAM7C,MAAM,GAAGF,SAAS,CAAC0C,OAAzB;AACAzC,IAAAA,IAAI,CAACC,MAAD,EAAQ,uBAAR,EAAgC,QAAhC,CAAJ;AACH,GAHD;;AAIA,QAAM8C,IAAI,GAAG,MAAM;AACf,UAAM9C,MAAM,GAAGF,SAAS,CAAC0C,OAAzB;AACAhD,IAAAA,KAAK,CAACuD,MAAN,CAAa,CAAC,CAAd,EAAgB,CAAhB;AACAlB,IAAAA,SAAS,CAAC7B,MAAD,CAAT;AACH,GAJD;;AASA,QAAMgD,WAAW,GAAInE,KAAD,IAAW;AAC3BgB,IAAAA,SAAS,CAAChB,KAAD,CAAT;AACH,GAFD;;AAGA,QAAMoE,SAAS,GAAIP,OAAD,IAAa;AAC5BnD,IAAAA,QAAQ,CAAC,CAAC,GAAGD,OAAJ,EAAaoD,OAAb,CAAD,CAAR;AACF,GAFD;;AAGA,QAAMQ,QAAQ,GAAGC,KAAD,IAAW;AACvB9E,IAAAA,YAAY,CAAC+E,UAAb,CAAyB,UAASD,KAAM,EAAxC;AACH,GAFD;;AAKA/F,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAM4C,MAAM,GAAGF,SAAS,CAAC0C,OAAzB;AACAzC,IAAAA,IAAI,CAACC,MAAD,EAASZ,KAAT,EAAe,MAAf,CAAJ;AAGH,GANQ,EAMN,CAACW,IAAD,EAAOX,KAAP,EAAcE,OAAd,EAAuBjB,YAAvB,CANM,CAAT,CArHoB,CA4HxB;;AAEA,QAAMgF,CAAC,GAAE/D,OAAO,CAACgE,GAAR,CAAY,CAACnF,IAAD,EAAOgF,KAAP,KAAe;AAChCzE,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBR,IAArB;AACA,wBAAO;AAAK,MAAA,SAAS,EAAEN,MAAM,CAAC0F,KAAvB;AAAA,8BACX,QAAC,WAAD;AAA0B,QAAA,GAAG,EAAEpF,IAA/B;AAAsC,QAAA,OAAO,EAAE6E,WAA/C;AAA4D,QAAA,MAAM,EAAG7E,IAAD,KAAWyB;AAA/E,SAAkBuD,KAAlB;AAAA;AAAA;AAAA;AAAA,cADW,eAEX,QAAC,YAAD;AAAc,QAAA,EAAE,EAAEA,KAAlB;AAAyB,QAAA,OAAO,EAAED,QAAlC;AAA4C,QAAA,SAAS,EAAErF,MAAM,CAAC2F;AAA9D;AAAA;AAAA;AAAA;AAAA,cAFW;AAAA,OAAmCrF,IAAnC;AAAA;AAAA;AAAA;AAAA,YAAP;AAGG,GALE,CAAT;AAOE,sBAAO,QAAC,QAAD;AAAA,4BACL;AAAK,MAAA,SAAS,EAAEN,MAAM,CAACyB,OAAvB;AAAA,gBACK+D;AADL;AAAA;AAAA;AAAA;AAAA,YADK,eAKL;AAAQ,MAAA,SAAS,EAAExF,MAAM,CAACmC,MAA1B;AAAkC,MAAA,KAAK,EAAC,KAAxC;AAA8C,MAAA,MAAM,EAAC,KAArD;AAA2D,MAAA,GAAG,EAAEF,SAAhE;AAAA,SAA+EX;AAA/E;AAAA;AAAA;AAAA;AAAA,YALK,eAML,QAAC,YAAD;AAAc,MAAA,iBAAiB,EAAEkD,iBAAjC;AAAoD,MAAA,KAAK,EAAE3C;AAA3D;AAAA;AAAA;AAAA;AAAA,YANK,eAOL;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE6C,IAAjB;AAAuB,QAAA,EAAE,EAAE,MAA3B;AAAmC,QAAA,IAAI,EAAE;AAAzC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEM,MAAjB;AAAyB,QAAA,EAAE,EAAE,QAA7B;AAAuC,QAAA,IAAI,EAAE;AAA7C;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAED,KAAjB;AAAwB,QAAA,EAAE,EAAE,OAA5B;AAAqC,QAAA,IAAI,EAAE;AAA3C;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEE,IAAjB;AAAuB,QAAA,EAAE,EAAE,MAA3B;AAAmC,QAAA,IAAI,EAAE;AAAzC;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPK,eAaL,QAAC,OAAD;AAAS,MAAA,aAAa,EAAER;AAAxB;AAAA;AAAA;AAAA;AAAA,YAbK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAeD,CApJD;;IAAMpD,M;UAEwBpB,e;;;KAFxBoB,M;AAqJN,eAAeA,MAAf,C,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Button from '../Buttons';\nimport LineWidthBar from '../LineWidthBar';\nimport GalleryItem from '../addNewImage';\nimport DeleteButton from '../DeleteButton';\nimport LoadImage from '../LoadImage';\n\nimport styles from '../Gallery.module.css';\n\n/*function ocalStorage() {\n    //console.log(typeof [])\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n        let gallery = JSON.parse(localStorage.getItem('gallery')) || [];\n        return gallery;\n        //let arr =[];\n       // if(localStorage.length !== 0){\n            for(let j = 1; j <= localStorage.length; j++){\n                let dataURL = localStorage.getItem(`gallery${j}`);\n               // console.log(typeof dataURL)\n                //console.log(localStorage)\n                arr.push(dataURL); \n            }\n       //     Object.keys(localStorage).forEach(key => arr.push(localStorage.getItem(key)));\n       // } \n        //console.log(arr)\n       // return localStorage;\n    });\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value) => {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore =\n            value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        let size = localStorage.length;\n        // Save to local storage\n        window.localStorage.setItem(`gallery${size+1}`, valueToStore);\n      \n    };\n    return [storedValue, setValue];\n  };*/\n  function useLocalStorage(key, initialValue) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    });\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value) => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    };\n    return [storedValue, setValue];\n  }\n\nconst Canvas = props => {\n    let [color, setColor] = useState('black');\n    let [gallery, setImage] = useLocalStorage('gallery', []);\n   \n    \n    let [paths, setPath] = useState([]);\n    let [lineWidth, setLineWidth] = useState(2);\n    let [toggleItem, setToggle] = useState([]);\n    const canvasRef = useRef(null);\n    const draw = (canvas, color, mode) => {\n        let rememberPath = false;\n        let points = [];\n        let context = canvas.getContext('2d');\n        context.globalCompositeOperation = mode ==='line'? \"source-over\": \"destination-out\";\n        canvas.onmousemove = function drawIfPressed (e) {\n            let x = e.offsetX;\n            let y = e.offsetY;\n            let dx = e.movementX;\n            let dy = e.movementY;\n            context.lineCap = \"round\";\n            context.lineWidth = lineWidth;\n            if (e.buttons > 0) {\n              context.beginPath();\n              context.moveTo(x, y);\n              context.lineTo(x - dx, y - dy);\n              context.stroke();\n              context.strokeStyle = color;\n              context.closePath();\n            }\n            if(rememberPath){\n                points.push({x:x-dx, y:y-dy, color: color, lineWidth: lineWidth})\n            }\n        };\n        canvas.onmouseup = (e) => {//не нажата\n            setPath([...paths, points])\n            rememberPath = false;\n        };\n        canvas.onmousedown = (e)=>{//нажата\n            let x = e.offsetX;\n            let y = e.offsetY;\n            let dx = e.movementX;\n            let dy = e.movementY;\n            points = [];\n            rememberPath = true;\n            points.push({x:x-dx,y:y-dy})\n        };\n    }\n    \n    const drawPaths = (canvas)=> {\n        let context = canvas.getContext('2d');\n        context.clearRect(0,0,canvas.width,canvas.height);\n        paths.forEach(path=>{\n        context.beginPath();\n        context.moveTo(path[0].x,path[0].y); \n        for(let i = 1; i < path.length; i++){\n            context.lineTo(path[i].x,path[i].y); \n            context.strokeStyle = path[i].color;\n            context.lineWidth = path[i].lineWidth;\n        }\n        context.stroke();\n        })\n    };\n\n    /*const showGallery = () => {\n        if(localStorage.length !==0){\n            for(let j = 1; j <= localStorage.length; j++){\n                let dataURL = localStorage.getItem(`gallery${j}`);\n                addNewImg(dataURL); \n            }\n        } \n    };*/\n\n    const onChangeLineWidth = width => setLineWidth(width); \n    const onChangeColor = color => setColor(color);\n    const save = () => {\n        const canvas = canvasRef.current;\n        let size = localStorage.length;\n        let dataURL = canvas.toDataURL(\"image/png\", 1.0);\n        //if(localStorage.getItem(`gallery${size}`) !== dataURL){//картинку сохраняем один раз\n          //  localStorage.setItem(`gallery${size+1}`, dataURL)\n            //addNewImg(dataURL); \n            setImage([...gallery,dataURL]);\n            //setImage(dataURL)\n            //console.log('gallery', gallery)\n        //}\n        \n    };\n    const clear = () => {\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        setPath([]);\n    };\n    const eraser = () => {\n        const canvas = canvasRef.current\n        draw(canvas,\"rgb(255, 255, 255, 1)\",'eraser');\n    };\n    const undo = () => {\n        const canvas = canvasRef.current;\n        paths.splice(-1,1);\n        drawPaths(canvas);\n    }\n\n    \n    \n\n    const toggleStyle = (value) => {\n        setToggle(value);\n    };\n    const addNewImg = (dataURL) => {\n       setImage([...gallery, dataURL]);\n    } \n    const onDelete= (index) => {\n        localStorage.removeItem(`gallery${index}`)\n    };\n      \n\n    useEffect(() => {\n        //showGallery();\n        const canvas = canvasRef.current;\n        draw(canvas, color,'line');\n        \n\n    }, [draw, color, gallery, localStorage]);\n//, lineWidth, toggleStyle\n\nconst w =gallery.map((item, index)=>{\n    console.log('item ', item)\n    return <div className={styles.block} key={item}>\n<GalleryItem key={index}  src={item}  onClick={toggleStyle} active={(item) === toggleItem}/>\n<DeleteButton id={index} onClick={onDelete} className={styles.deleteButton}/>\n</div>})\n  \n  return <Fragment>\n    <div className={styles.gallery}>\n        {w}\n       </div>\n    \n    <canvas className={styles.canvas} width='450' height='450' ref={canvasRef} {...props}/>\n    <LineWidthBar onChangeLineWidth={onChangeLineWidth} value={lineWidth}/> \n    <div>\n        <Button onClick={save} id={'save'} text={'сохранить'}/>\n        <Button onClick={eraser} id={'eraser'} text={'ластик'}/>\n        <Button onClick={clear} id={'clear'} text={'clear'}/>\n        <Button onClick={undo} id={'undo'} text={'undo'}/>\n    </div>\n    <Palette onChangeColor={onChangeColor}></Palette>\n  </Fragment> \n}\nexport default Canvas;\n//<LoadImage addNewImg={addNewImg} />\n/*\n gallery.map((item, index)=><div className={styles.block} key={item}>\n        <GalleryItem key={item+index}  src={item}  onClick={toggleStyle} active={(item) === toggleItem}/>\n        <DeleteButton id={item} onClick={onDelete} className={styles.deleteButton}/>\n        </div>)\n*/\n/*gallery.map((item, index)=><div className={styles.block} key={item}>\n       <GalleryItem key={item+index}  src={item}  onClick={toggleStyle} active={(item) === toggleItem}/>\n       <DeleteButton id={item} onClick={onDelete} className={styles.deleteButton}/>\n       </div>) */"]},"metadata":{},"sourceType":"module"}