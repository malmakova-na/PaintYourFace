{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/components/FaceMash/camera.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect, useState } from \"react\";\nimport React, { useRef } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as facemesh from \"@tensorflow-models/facemesh\";\nimport FacePaint from './FacePaint';\nimport styles from './Camera.module.css';\nimport emptyMask from '../images/emptyMask.png';\nimport Canvas from '../graficEditor/GraficEditor'; //export \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Camera = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const videoRef = useRef(null);\n  const [faceCanvas, setFaceCanvas] = useState(null);\n  const [isLoaded, setloader] = useState(false);\n  useEffect(() => {\n    let model, w, h;\n    let faceCanvas;\n    const video = videoRef.current;\n\n    async function renderPredictions(t) {\n      requestAnimationFrame(renderPredictions);\n      const predictions = await model.estimateFaces(video);\n\n      if (predictions.length > 0) {\n        for (let i = 0; i < predictions.length; i++) {\n          const positionBufferData = predictions[0].scaledMesh.reduce((acc, pos) => acc.concat(pos), []);\n\n          if (!faceCanvas) {\n            const props = {\n              id: 'faceCanvas',\n              textureFilePath: emptyMask,\n              w,\n              h\n            }; //faceCanvas = new FacePaint(props);\n\n            setFaceCanvas(new FacePaint(props));\n            setloader(true);\n            return;\n          }\n\n          faceCanvas.render(positionBufferData); //alert(fetchFace(faceCanvas) === faceCanvas)\n        }\n      }\n    }\n\n    async function fetchCam() {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: false\n      });\n      video.srcObject = stream;\n      await new Promise(function (res) {\n        video.onloadedmetadata = function () {\n          w = video.videoWidth;\n          h = video.videoHeight;\n          res();\n        };\n      });\n      model = await facemesh.load({\n        maxContinuousChecks: 5,\n        detectionConfidence: 0.9,\n        maxFaces: 1,\n        iouThreshold: 0.3,\n        scoreThreshold: 0.75\n      });\n      renderPredictions();\n      video.height = h;\n      video.width = w;\n    }\n\n    fetchCam();\n    video.play();\n    tf.env().set('WEBGL_CPU_FORWARD', false);\n  }, [isLoaded]);\n  return isLoaded ? /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.camera,\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        muted: true,\n        playsInline: true,\n        className: styles.webcam,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"faceCanvas\",\n        className: styles.faceCanvas,\n        ref: canvasRef,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      faceCanvas: faceCanvas,\n      style: {\n        width: '450px',\n        height: '450px',\n        border: '2px solid red'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 23\n  }, this) : 'loading';\n};\n\n_s(Camera, \"QnTLdG/bkn033gamaj0uDu08/5k=\");\n\n_c = Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/FaceMash/camera.js"],"names":["Fragment","useEffect","useState","React","useRef","tf","facemesh","FacePaint","styles","emptyMask","Canvas","Camera","props","canvasRef","videoRef","faceCanvas","setFaceCanvas","isLoaded","setloader","model","w","h","video","current","renderPredictions","t","requestAnimationFrame","predictions","estimateFaces","length","i","positionBufferData","scaledMesh","reduce","acc","pos","concat","id","textureFilePath","render","fetchCam","stream","navigator","mediaDevices","getUserMedia","audio","srcObject","Promise","res","onloadedmetadata","videoWidth","videoHeight","load","maxContinuousChecks","detectionConfidence","maxFaces","iouThreshold","scoreThreshold","height","width","play","env","set","camera","webcam","border"],"mappings":"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","sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\nimport React, { useRef} from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as facemesh from \"@tensorflow-models/facemesh\";\nimport FacePaint from './FacePaint';\nimport styles from './Camera.module.css';\nimport emptyMask from '../images/emptyMask.png';\nimport Canvas from '../graficEditor/GraficEditor';\n//export \n\n\nexport const Camera = props => {\n    const canvasRef = useRef(null);\n    const videoRef = useRef(null);\n    const [faceCanvas, setFaceCanvas] = useState(null);\n    const [isLoaded, setloader] = useState(false);\n    useEffect(()=>{\n        let model, w, h;\n        let faceCanvas;\n        const video = videoRef.current;\n        async function renderPredictions(t) {\n            requestAnimationFrame(renderPredictions);\n            const predictions = await model.estimateFaces(video);\n        \n            if (predictions.length > 0) {\n                for\t(let i = 0; i < predictions.length; i++) {\n                    const positionBufferData = predictions[0].scaledMesh.reduce((acc, pos) => acc.concat(pos), []);\n                    if (!faceCanvas) {\n                        const props = {\n                            id: 'faceCanvas',\n                            textureFilePath: emptyMask,\n                            w,\n                            h\n                        }\n                        //faceCanvas = new FacePaint(props);\n                        setFaceCanvas(new FacePaint(props));\n                        setloader(true);\n                        return ;\n                    }\n                    faceCanvas.render(positionBufferData);\n                        //alert(fetchFace(faceCanvas) === faceCanvas)\n                }\n            }\n        }\n        async function fetchCam () {\n            const stream = await navigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo: true,\n\t\t\t\taudio: false\n\t\t\t});\n            video.srcObject = stream;\n            await new Promise(function (res) {\n\t\t\t\tvideo.onloadedmetadata = function () {\n\t\t\t\t\tw = video.videoWidth;\n\t\t\t\t\th = video.videoHeight;\n\t\t\t\t\tres();\n\t\t\t\t}\n\t\t\t});\n            model = await facemesh.load({\n                maxContinuousChecks: 5,\n                detectionConfidence: 0.9,\n                maxFaces: 1,\n                iouThreshold: 0.3,\n                scoreThreshold: 0.75\n            });\n            renderPredictions();\n            \n\n\t\t    video.height = h;\n\t\t\tvideo.width = w;\n\n        }\n        fetchCam()\n        video.play();\n        tf.env().set('WEBGL_CPU_FORWARD', false);\n        \n\n    }, [isLoaded]);\n    return isLoaded ? <Fragment> \n    <div className={styles.camera}>\n        <video ref={videoRef} muted={true} playsInline={true}  className={styles.webcam} autoPlay={true} ></video>\n        <canvas id='faceCanvas' className={styles.faceCanvas}  ref={canvasRef} {...props}></canvas>\n    </div>\n    <Canvas faceCanvas={faceCanvas} style ={{width: '450px', height: '450px', border:'2px solid red'}}/> \n    </Fragment> : 'loading';\n};\n"]},"metadata":{},"sourceType":"module"}