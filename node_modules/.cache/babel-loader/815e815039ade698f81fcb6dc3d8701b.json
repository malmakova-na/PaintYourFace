{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, Fragment } from 'react';\nimport Palette from '../components/Palette/Palette';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst draw = (canvas, context) => {\n  canvas.onmousemove = function drawIfPressed(e) {\n    let x = e.offsetX;\n    let y = e.offsetY;\n    let dx = e.movementX;\n    let dy = e.movementY;\n\n    if (e.buttons > 0) {\n      context.beginPath();\n      context.moveTo(x, y);\n      context.lineTo(x - dx, y - dy);\n      context.stroke();\n      context.closePath();\n    }\n  };\n};\n\nexport const getContext = canvas => canvas.getContext('2d');\n\nconst Canvas = props => {\n  _s();\n\n  let [color, setColor] = useState('black');\n\n  const onChangeColor = color => {\n    setColor(color);\n    let context = getContext();\n    context.strokeStyle = color;\n  };\n\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = getContext(canvas);\n    context.lineCap = \"round\";\n    context.lineWidth = 8;\n    draw(canvas, context);\n  }, [draw, color]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      width: \"450\",\n      height: \"450\",\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Palette, {\n      onChangeColor: onChangeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"IDUxgqFpJnPTXGTaMCkcNmrDlyo=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js"],"names":["React","useRef","useEffect","Fragment","Palette","draw","canvas","context","onmousemove","drawIfPressed","e","x","offsetX","y","offsetY","dx","movementX","dy","movementY","buttons","beginPath","moveTo","lineTo","stroke","closePath","getContext","Canvas","props","color","setColor","useState","onChangeColor","strokeStyle","canvasRef","current","lineCap","lineWidth"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,OAAP,MAAoB,+BAApB;;;AAEA,MAAMC,IAAI,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AAC9BD,EAAAA,MAAM,CAACE,WAAP,GAAqB,SAASC,aAAT,CAAwBC,CAAxB,EAA2B;AAC5C,QAAIC,CAAC,GAAGD,CAAC,CAACE,OAAV;AACA,QAAIC,CAAC,GAAGH,CAAC,CAACI,OAAV;AACA,QAAIC,EAAE,GAAGL,CAAC,CAACM,SAAX;AACA,QAAIC,EAAE,GAAGP,CAAC,CAACQ,SAAX;;AACA,QAAIR,CAAC,CAACS,OAAF,GAAY,CAAhB,EAAmB;AACjBZ,MAAAA,OAAO,CAACa,SAAR;AACAb,MAAAA,OAAO,CAACc,MAAR,CAAeV,CAAf,EAAkBE,CAAlB;AACAN,MAAAA,OAAO,CAACe,MAAR,CAAeX,CAAC,GAAGI,EAAnB,EAAuBF,CAAC,GAAGI,EAA3B;AACAV,MAAAA,OAAO,CAACgB,MAAR;AACAhB,MAAAA,OAAO,CAACiB,SAAR;AACD;AACF,GAZH;AAaH,CAdD;;AAeA,OAAO,MAAMC,UAAU,GAAInB,MAAD,IAAYA,MAAM,CAACmB,UAAP,CAAkB,IAAlB,CAA/B;;AAGP,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AACpB,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,OAAD,CAAhC;;AAEA,QAAMC,aAAa,GAAGH,KAAK,IAAI;AAC3BC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACA,QAAIrB,OAAO,GAAGkB,UAAU,EAAxB;AACAlB,IAAAA,OAAO,CAACyB,WAAR,GAAsBJ,KAAtB;AACH,GAJD;;AAKA,QAAMK,SAAS,GAAGhC,MAAM,CAAC,IAAD,CAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMI,MAAM,GAAG2B,SAAS,CAACC,OAAzB;AACA,UAAM3B,OAAO,GAAGkB,UAAU,CAACnB,MAAD,CAA1B;AACAC,IAAAA,OAAO,CAAC4B,OAAR,GAAkB,OAAlB;AACA5B,IAAAA,OAAO,CAAC6B,SAAR,GAAoB,CAApB;AACA/B,IAAAA,IAAI,CAACC,MAAD,EAASC,OAAT,CAAJ;AACH,GANQ,EAMN,CAACF,IAAD,EAAOuB,KAAP,CANM,CAAT;AAQF,sBAAO,QAAC,QAAD;AAAA,4BACH;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAoB,MAAA,MAAM,EAAC,KAA3B;AAAiC,MAAA,GAAG,EAAEK,SAAtC;AAAA,SAAqDN;AAArD;AAAA;AAAA;AAAA;AAAA,YADG,eAEL,QAAC,OAAD;AAAS,MAAA,aAAa,EAAEI;AAAxB;AAAA;AAAA;AAAA;AAAA,YAFK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAID,CAtBD;;GAAML,M;;KAAAA,M;AAwBN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect, Fragment } from 'react';\nimport Palette from '../components/Palette/Palette';\n\nconst draw = (canvas, context) => {\n    canvas.onmousemove = function drawIfPressed (e) {\n        let x = e.offsetX;\n        let y = e.offsetY;\n        let dx = e.movementX;\n        let dy = e.movementY;\n        if (e.buttons > 0) {\n          context.beginPath();\n          context.moveTo(x, y);\n          context.lineTo(x - dx, y - dy);\n          context.stroke();\n          context.closePath();\n        }\n      };\n}\nexport const getContext = (canvas) => canvas.getContext('2d'); \n\n\nconst Canvas = props => {\n    let [color, setColor] = useState('black');\n    \n    const onChangeColor = color => {\n        setColor(color);\n        let context = getContext();\n        context.strokeStyle = color;\n    };\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const context = getContext(canvas);\n        context.lineCap = \"round\";\n        context.lineWidth = 8;\n        draw(canvas, context);\n    }, [draw, color])\n  \n  return <Fragment>\n      <canvas width='450' height='450' ref={canvasRef} {...props}/>\n    <Palette onChangeColor={onChangeColor}></Palette>\n  </Fragment> \n}\n\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}