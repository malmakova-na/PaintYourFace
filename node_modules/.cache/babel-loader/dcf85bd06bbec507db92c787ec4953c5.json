{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/components/DrawEdit/DrawEdit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport { MODE, COLOR_MAP } from \"sr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DrawEdit = props => {\n  _s();\n\n  let stage = null;\n  const [color, setColor] = useState(\"DARK\"); //const [scale, setScale] = useState(1);\n\n  const [mode, setMode] = useState(MODE.PENCIL);\n  const [currentLine, setCurrentLine] = useState(null);\n  const [lines, setLines] = useState([]);\n\n  const onMouseDown = () => {\n    const {\n      x,\n      y\n    } = getScaledPoint(stage, scale);\n    setCurrentLine({\n      points: [x, y],\n      color\n    });\n  };\n\n  const onMouseMove = () => {\n    if (currentLine) {\n      const {\n        x,\n        y\n      } = getScaledPoint(stage, scale);\n\n      switch (mode) {\n        case MODE.PENCIL:\n          setCurrentLine({ ...currentLine,\n            points: [...currentLine.points, x, y]\n          });\n          break;\n\n        case MODE.LINE:\n          const [x0, y0] = currentLine.points;\n          setCurrentLine({ ...currentLine,\n            points: [x0, y0, x, y]\n          });\n          break;\n\n        default:\n      }\n    }\n  };\n\n  const onMouseUp = () => {\n    const {\n      x,\n      y\n    } = getScaledPoint(stage, scale);\n    setCurrentLine(null);\n    setLines([...lines, { ...currentLine,\n      points: [...currentLine.points, x, y]\n    }]);\n  };\n\n  const onSetMode = mode => {\n    setMode(mode);\n  };\n\n  const setStageRef = ref => {\n    if (ref) {\n      stage = ref;\n    }\n  };\n\n  const onChangeColor = color => {\n    setColor(color);\n  };\n\n  const onChangeScale = delta => {\n    setScale(scale + delta);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-layout\",\n    children: /*#__PURE__*/_jsxDEV(Stage, {\n      ref: setStageRef,\n      className: \"konva-container\",\n      width: props.width * scale,\n      height: props.height * scale,\n      onMouseDown: onMouseDown,\n      onMouseMove: onMouseMove,\n      onMouseUp: onMouseUp,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: [/*#__PURE__*/_jsxDEV(Line, { ...currentLine,\n          // scale={{ x: scale, y: scale }}\n          strokeWidth: 1,\n          stroke: COLOR_MAP[color]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), lines.map((line, index) => /*#__PURE__*/_jsxDEV(Line, { ...line,\n          scale: {\n            x: scale,\n            y: scale\n          },\n          strokeWidth: 1,\n          stroke: COLOR_MAP[line.color]\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DrawEdit, \"SnLLW6YLF9WqxK6b6orLbkMRoVk=\");\n\n_c = DrawEdit;\nDrawEdit.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number\n};\nexport default DrawEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrawEdit\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/DrawEdit/DrawEdit.js"],"names":["React","useState","PropTypes","Stage","Layer","Line","MODE","COLOR_MAP","DrawEdit","props","stage","color","setColor","mode","setMode","PENCIL","currentLine","setCurrentLine","lines","setLines","onMouseDown","x","y","getScaledPoint","scale","points","onMouseMove","LINE","x0","y0","onMouseUp","onSetMode","setStageRef","ref","onChangeColor","onChangeScale","delta","setScale","width","height","map","line","index","propTypes","number"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport { MODE, COLOR_MAP } from \"sr\";\n\n\nconst DrawEdit = props => {\n    let stage = null;\n    const [color, setColor] = useState(\"DARK\");\n    //const [scale, setScale] = useState(1);\n    const [mode, setMode] = useState(MODE.PENCIL);\n    const [currentLine, setCurrentLine] = useState(null);\n    const [lines, setLines] = useState([]);\n  \n    const onMouseDown = () => {\n      const { x, y } = getScaledPoint(stage, scale);\n      setCurrentLine({ points: [x, y], color });\n    };\n  \n    const onMouseMove = () => {\n      if (currentLine) {\n        const { x, y } = getScaledPoint(stage, scale);\n        switch (mode) {\n          case MODE.PENCIL:\n            setCurrentLine({\n              ...currentLine,\n              points: [...currentLine.points, x, y]\n            });\n            break;\n          case MODE.LINE:\n            const [x0, y0] = currentLine.points;\n            setCurrentLine({\n              ...currentLine,\n              points: [x0, y0, x, y]\n            });\n            break;\n          default:\n        }\n      }\n    };\n  \n    const onMouseUp = () => {\n      const { x, y } = getScaledPoint(stage, scale);\n      setCurrentLine(null);\n      setLines([\n        ...lines,\n        { ...currentLine, points: [...currentLine.points, x, y] }\n      ]);\n    };\n  \n    const onSetMode = mode => {\n      setMode(mode);\n    };\n  \n    const setStageRef = ref => {\n      if (ref) {\n        stage = ref;\n      }\n    };\n  \n    const onChangeColor = color => {\n      setColor(color);\n    };\n  \n    const onChangeScale = delta => {\n      setScale(scale + delta);\n    };\n    return (\n        <div className=\"main-layout\">\n          <Stage\n            ref={setStageRef}\n            className=\"konva-container\"\n            width={props.width * scale}\n            height={props.height * scale}\n            onMouseDown={onMouseDown}\n            onMouseMove={onMouseMove}\n            onMouseUp={onMouseUp}\n          >\n            <Layer>\n              <Line\n                {...currentLine}\n               // scale={{ x: scale, y: scale }}\n                strokeWidth={1}\n                stroke={COLOR_MAP[color]}\n              />\n              {lines.map((line, index) => (\n                <Line\n                  key={index}\n                  {...line}\n                  scale={{ x: scale, y: scale }}\n                  strokeWidth={1}\n                  stroke={COLOR_MAP[line.color]}\n                />\n              ))}\n            </Layer>\n          </Stage>\n        </div>\n      );\n    };\n    \nDrawEdit.propTypes = {\n    width: PropTypes.number,\n    height: PropTypes.number\n};\nexport default DrawEdit;"]},"metadata":{},"sourceType":"module"}