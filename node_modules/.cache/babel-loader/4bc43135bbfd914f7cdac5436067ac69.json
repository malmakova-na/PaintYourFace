{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/components/FaceMash/camera.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect, useState } from \"react\";\nimport React, { useRef } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as facemesh from \"@tensorflow-models/facemesh\";\nimport FacePaint from './FacePaint';\nimport styles from './Camera.module.css';\nimport emptyMask from '../images/emptyMask.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let faceCanvas;\nexport let faceCam = renderPredictions();\n\nasync function renderPredictions(t) {\n  requestAnimationFrame(renderPredictions);\n  const predictions = await model.estimateFaces(video);\n\n  if (predictions.length > 0) {\n    for (let i = 0; i < predictions.length; i++) {\n      const positionBufferData = predictions[0].scaledMesh.reduce((acc, pos) => acc.concat(pos), []);\n\n      if (!faceCanvas) {\n        const props = {\n          id: 'faceCanvas',\n          textureFilePath: emptyMask,\n          w,\n          h\n        };\n        faceCanvas = new FacePaint(props);\n        return faceCanvas;\n      }\n\n      faceCanvas.render(positionBufferData); //alert(fetchFace(faceCanvas) === faceCanvas)\n    }\n  }\n}\n\nexport const Camera = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const videoRef = useRef(null);\n  useEffect(() => {\n    let model, w, h;\n    const video = videoRef.current;\n\n    async function fetchCam() {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: false\n      });\n      video.srcObject = stream;\n      await new Promise(function (res) {\n        video.onloadedmetadata = function () {\n          w = video.videoWidth;\n          h = video.videoHeight;\n          res();\n        };\n      });\n      model = await facemesh.load({\n        maxContinuousChecks: 5,\n        detectionConfidence: 0.9,\n        maxFaces: 1,\n        iouThreshold: 0.3,\n        scoreThreshold: 0.75\n      });\n      renderPredictions();\n      video.height = h;\n      video.width = w;\n    }\n\n    fetchCam();\n    video.play();\n    tf.env().set('WEBGL_CPU_FORWARD', false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.camera,\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        muted: true,\n        playsInline: true,\n        className: styles.webcam,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"faceCanvas\",\n        className: styles.faceCanvas,\n        ref: canvasRef,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Camera, \"yDZRt0qVdA+8KL1NIY7I2UpyRts=\");\n\n_c = Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/FaceMash/camera.js"],"names":["Fragment","useEffect","useState","React","useRef","tf","facemesh","FacePaint","styles","emptyMask","faceCanvas","faceCam","renderPredictions","t","requestAnimationFrame","predictions","model","estimateFaces","video","length","i","positionBufferData","scaledMesh","reduce","acc","pos","concat","props","id","textureFilePath","w","h","render","Camera","canvasRef","videoRef","current","fetchCam","stream","navigator","mediaDevices","getUserMedia","audio","srcObject","Promise","res","onloadedmetadata","videoWidth","videoHeight","load","maxContinuousChecks","detectionConfidence","maxFaces","iouThreshold","scoreThreshold","height","width","play","env","set","camera","webcam"],"mappings":"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","sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\nimport React, { useRef} from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as facemesh from \"@tensorflow-models/facemesh\";\nimport FacePaint from './FacePaint';\nimport styles from './Camera.module.css';\nimport emptyMask from '../images/emptyMask.png';\nexport let faceCanvas;\nexport let faceCam = renderPredictions();\nasync function renderPredictions(t) {\n    requestAnimationFrame(renderPredictions);\n    const predictions = await model.estimateFaces(video);\n\n    if (predictions.length > 0) {\n        for\t(let i = 0; i < predictions.length; i++) {\n            const positionBufferData = predictions[0].scaledMesh.reduce((acc, pos) => acc.concat(pos), []);\n            if (!faceCanvas) {\n                const props = {\n                    id: 'faceCanvas',\n                    textureFilePath: emptyMask,\n                    w,\n                    h\n                }\n                faceCanvas = new FacePaint(props);\n                return faceCanvas;\n            }\n            faceCanvas.render(positionBufferData);\n\n                //alert(fetchFace(faceCanvas) === faceCanvas)\n        }\n    }\n}\nexport const Camera = props => {\n    const canvasRef = useRef(null);\n    const videoRef = useRef(null);\n    useEffect(()=>{\n        let model, w, h;\n        const video = videoRef.current;\n        async function fetchCam () {\n            \n            const stream = await navigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo: true,\n\t\t\t\taudio: false\n\t\t\t});\n            video.srcObject = stream;\n            await new Promise(function (res) {\n\t\t\t\tvideo.onloadedmetadata = function () {\n\t\t\t\t\tw = video.videoWidth;\n\t\t\t\t\th = video.videoHeight;\n\t\t\t\t\tres();\n\t\t\t\t}\n\t\t\t});\n            model = await facemesh.load({\n                maxContinuousChecks: 5,\n                detectionConfidence: 0.9,\n                maxFaces: 1,\n                iouThreshold: 0.3,\n                scoreThreshold: 0.75\n            });\n            renderPredictions();\n            \n\n\t\t    video.height = h;\n\t\t\tvideo.width = w;\n        }\n        fetchCam()\n        video.play();\n        tf.env().set('WEBGL_CPU_FORWARD', false);\n        \n\n    }, []);\n    return <Fragment> \n    <div className={styles.camera}>\n        <video ref={videoRef} muted={true} playsInline={true}  className={styles.webcam} autoPlay={true} ></video>\n        <canvas id='faceCanvas' className={styles.faceCanvas}  ref={canvasRef} {...props}></canvas>\n    </div>\n    </Fragment>;\n};"]},"metadata":{},"sourceType":"module"}