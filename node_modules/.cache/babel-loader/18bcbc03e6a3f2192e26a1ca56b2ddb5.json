{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Buttons from '../Buttons';\nimport styles from '../Gallery.module.css'; //let paths = [];\n\n/*let points = [];\nlet drawing = false;*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  let [color, setColor] = useState('black');\n  let [gallery, setImage] = useState([]); //let [points, setPoint] = useState([]);\n\n  let [paths, setPath] = useState([]); //let [rememberPath, setRememberPath] = useState(false);\n\n  const canvasRef = useRef(null);\n  let rememberPath = false;\n  let points = [];\n\n  const draw = (canvas, color, mode) => {\n    let context = canvas.getContext('2d');\n    context.globalCompositeOperation = mode === 'line' ? \"source-over\" : \"destination-out\";\n\n    canvas.onmousemove = function drawIfPressed(e) {\n      let x = e.offsetX;\n      let y = e.offsetY;\n      let dx = e.movementX;\n      let dy = e.movementY;\n      context.lineCap = \"round\";\n      context.lineWidth = 8;\n\n      if (e.buttons > 0) {\n        context.beginPath();\n        context.moveTo(x, y);\n        context.lineTo(x - dx, y - dy);\n        context.stroke();\n        context.strokeStyle = color;\n        context.closePath();\n      }\n\n      if (rememberPath) {\n        points.push({\n          x: x - dx,\n          y: y - dy\n        }); //setPoint(...points, {x:x-dx, y:y-dy});\n      }\n    };\n\n    canvas.onmouseup = e => {\n      //не нажата\n      console.log(paths); //paths.push(points);\n\n      setPath(paths, points); //drawing=false;\n\n      rememberPath = false;\n    };\n\n    canvas.onmousedown = e => {\n      //нажата\n      //drawing=true;\n      let x = e.offsetX;\n      let y = e.offsetY;\n      let dx = e.movementX;\n      let dy = e.movementY; //setPoint([]);\n      //setPoint({x:x-dx, y:y-dy});\n\n      points = [];\n      points.push({\n        x: x - dx,\n        y: y - dy\n      });\n      rememberPath = true;\n      console.log('on');\n    };\n  };\n\n  const drawPaths = canvas => {\n    let ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    paths.forEach(path => {\n      ctx.beginPath();\n      ctx.moveTo(path[0].x, path[0].y);\n\n      for (let i = 1; i < path.length; i++) {\n        ctx.lineTo(path[i].x, path[i].y);\n      }\n\n      ctx.stroke();\n    });\n  };\n\n  const onChangeColor = color => {\n    setColor(color);\n  };\n\n  const save = () => {\n    const canvas = canvasRef.current;\n    let size = localStorage.length;\n    let dataURL = canvas.toDataURL(\"image/png\", 1.0);\n    localStorage.setItem(`gallery${size + 1}`, dataURL);\n    addNewImg(dataURL);\n  };\n\n  const clear = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  const eraser = () => {\n    const canvas = canvasRef.current;\n    draw(canvas, \"rgb(255, 255, 255, 1)\", 'eraser');\n  };\n\n  const addNewImg = dataURL => {\n    setImage([...gallery, /*#__PURE__*/_jsxDEV(\"img\", {\n      src: dataURL,\n      className: styles.picture\n    }, dataURL, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 31\n    }, this)]);\n  };\n\n  const undo = () => {\n    const canvas = canvasRef.current;\n    paths.splice(-1, 1);\n    drawPaths(canvas);\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    draw(canvas, color, 'line');\n  }, [draw, color, gallery]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.gallery,\n      children: gallery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: styles.canvas,\n      width: \"450\",\n      height: \"450\",\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n      clear: clear,\n      save: save,\n      eraser: eraser,\n      undo: undo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Palette, {\n      onChangeColor: onChangeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"1lOh2dbMOmP+IVdzkfH5sambs/s=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js"],"names":["React","useRef","useEffect","Fragment","useState","Palette","Buttons","styles","Canvas","props","color","setColor","gallery","setImage","paths","setPath","canvasRef","rememberPath","points","draw","canvas","mode","context","getContext","globalCompositeOperation","onmousemove","drawIfPressed","e","x","offsetX","y","offsetY","dx","movementX","dy","movementY","lineCap","lineWidth","buttons","beginPath","moveTo","lineTo","stroke","strokeStyle","closePath","push","onmouseup","console","log","onmousedown","drawPaths","ctx","clearRect","width","height","forEach","path","i","length","onChangeColor","save","current","size","localStorage","dataURL","toDataURL","setItem","addNewImg","clear","eraser","picture","undo","splice"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Buttons from '../Buttons';\nimport styles from '../Gallery.module.css';\n\n\n//let paths = [];\n/*let points = [];\nlet drawing = false;*/\n\nconst Canvas = props => {\n    let [color, setColor] = useState('black');\n    let [gallery, setImage] = useState([]);\n    //let [points, setPoint] = useState([]);\n   let [paths, setPath] = useState([]);\n    //let [rememberPath, setRememberPath] = useState(false);\n    const canvasRef = useRef(null);\n    let rememberPath = false;\n    let points = [];\n    const draw = (canvas, color, mode) => {\n        let context = canvas.getContext('2d');\n        context.globalCompositeOperation = mode ==='line'? \"source-over\": \"destination-out\";\n        canvas.onmousemove = function drawIfPressed (e) {\n            let x = e.offsetX;\n            let y = e.offsetY;\n            let dx = e.movementX;\n            let dy = e.movementY;\n            context.lineCap = \"round\";\n            context.lineWidth = 8;\n            if (e.buttons > 0) {\n              context.beginPath();\n              context.moveTo(x, y);\n              context.lineTo(x - dx, y - dy);\n              context.stroke();\n              context.strokeStyle = color;\n              context.closePath();\n            }\n            if(rememberPath){\n                points.push({x:x-dx, y:y-dy})\n                //setPoint(...points, {x:x-dx, y:y-dy});\n            }\n        };\n        canvas.onmouseup = (e) => {//не нажата\n            console.log(paths)\n            //paths.push(points);\n            setPath(paths, points)\n            //drawing=false;\n            rememberPath = false;\n        };\n        canvas.onmousedown = (e)=>{//нажата\n            //drawing=true;\n            let x = e.offsetX;\n            let y = e.offsetY;\n            let dx = e.movementX;\n            let dy = e.movementY;\n           //setPoint([]);\n            //setPoint({x:x-dx, y:y-dy});\n            points = [];\n            points.push({x:x-dx, y:y-dy})\n            rememberPath = true;\n            console.log('on')\n        };\n    }\n    \n    const drawPaths = (canvas)=> {\n        let ctx = canvas.getContext('2d');\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n        paths.forEach(path=>{\n        ctx.beginPath();\n        ctx.moveTo(path[0].x,path[0].y);  \n        for(let i = 1; i < path.length; i++){\n            ctx.lineTo(path[i].x,path[i].y); \n        }\n        ctx.stroke();\n        })\n    };\n    \n\n\n    const onChangeColor = color => {\n        setColor(color);\n    };\n    const save = () => {\n        const canvas = canvasRef.current\n        let size = localStorage.length;\n        let dataURL = canvas.toDataURL(\"image/png\", 1.0);\n        localStorage.setItem(`gallery${size+1}`, dataURL)\n        addNewImg(dataURL); \n    };\n    const clear = () => {\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n    const eraser = () => {\n        const canvas = canvasRef.current\n        draw(canvas,\"rgb(255, 255, 255, 1)\",'eraser');\n    };\n    const addNewImg = (dataURL) => {\n        setImage([...gallery, <img key={dataURL} src={dataURL} className={styles.picture}/>]);\n    }\n    const undo = () => {\n        const canvas = canvasRef.current;\n        paths.splice(-1,1);\n        drawPaths(canvas);\n    }\n\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        draw(canvas, color,'line');\n    }, [draw, color, gallery]);\n  \n  return <Fragment>\n    <div className={styles.gallery}>{gallery}</div>\n    <canvas className={styles.canvas} width='450' height='450' ref={canvasRef} {...props}/>\n    <Buttons clear={clear} save ={save} eraser={eraser} undo={undo}/>\n    <Palette onChangeColor={onChangeColor}></Palette>\n  </Fragment> \n}\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}