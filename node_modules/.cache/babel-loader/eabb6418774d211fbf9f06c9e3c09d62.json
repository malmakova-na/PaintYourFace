{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Buttons from '../Buttons';\nimport styles from '../Gallery.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  let [color, setColor] = useState('black');\n  let [gallery, setImage] = useState([]);\n  let [paths, setPath] = useState([]);\n  let [lineWidth, setLineWidth] = useState(30);\n  const canvasRef = useRef(null);\n\n  const draw = (canvas, color, mode) => {\n    let rememberPath = false;\n    let points = [];\n    let context = canvas.getContext('2d');\n    context.globalCompositeOperation = mode === 'line' ? \"source-over\" : \"destination-out\";\n\n    canvas.onmousemove = function drawIfPressed(e) {\n      let x = e.offsetX;\n      let y = e.offsetY;\n      let dx = e.movementX;\n      let dy = e.movementY;\n      context.lineCap = \"round\";\n      context.lineWidth = lineWidth;\n\n      if (e.buttons > 0) {\n        context.beginPath();\n        context.moveTo(x, y);\n        context.lineTo(x - dx, y - dy);\n        context.stroke();\n        context.strokeStyle = color;\n        context.closePath();\n      }\n\n      if (rememberPath) {\n        points.push({\n          x: x - dx,\n          y: y - dy,\n          color: color\n        });\n      }\n    };\n\n    canvas.onmouseup = e => {\n      //не нажата\n      setPath([...paths, points]);\n      rememberPath = false;\n    };\n\n    canvas.onmousedown = e => {\n      //нажата\n      points = [];\n      rememberPath = true;\n    };\n  };\n\n  const drawPaths = canvas => {\n    let context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    paths.forEach(path => {\n      context.beginPath();\n\n      for (let i = 0; i < path.length; i++) {\n        context.lineTo(path[i].x, path[i].y);\n        context.strokeStyle = path[i].color;\n      }\n\n      context.stroke();\n    });\n  };\n\n  const onChangeLineWidth = width => setLineWidth(width);\n\n  const onChangeColor = color => setColor(color);\n\n  const save = () => {\n    const canvas = canvasRef.current;\n    let size = localStorage.length;\n    let dataURL = canvas.toDataURL(\"image/png\", 1.0);\n    localStorage.setItem(`gallery${size + 1}`, dataURL);\n    addNewImg(dataURL);\n  };\n\n  const clear = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  const eraser = () => {\n    const canvas = canvasRef.current;\n    draw(canvas, \"rgb(255, 255, 255, 1)\", 'eraser');\n  };\n\n  const addNewImg = dataURL => {\n    setImage([...gallery, /*#__PURE__*/_jsxDEV(\"img\", {\n      src: dataURL,\n      className: styles.picture\n    }, dataURL, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 31\n    }, this)]);\n  };\n\n  const undo = () => {\n    const canvas = canvasRef.current;\n    paths.splice(-1, 1);\n    drawPaths(canvas);\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    draw(canvas, color, 'line');\n  }, [draw, color, gallery]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.gallery,\n      children: gallery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: styles.canvas,\n      width: \"450\",\n      height: \"450\",\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n      clear: clear,\n      save: save,\n      eraser: eraser,\n      undo: undo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Palette, {\n      onChangeColor: onChangeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"2xEUHcB4E1YDaxrffIf9dTsofmQ=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/components/canvas/Canvas.js"],"names":["React","useRef","useEffect","Fragment","useState","Palette","Buttons","styles","Canvas","props","color","setColor","gallery","setImage","paths","setPath","lineWidth","setLineWidth","canvasRef","draw","canvas","mode","rememberPath","points","context","getContext","globalCompositeOperation","onmousemove","drawIfPressed","e","x","offsetX","y","offsetY","dx","movementX","dy","movementY","lineCap","buttons","beginPath","moveTo","lineTo","stroke","strokeStyle","closePath","push","onmouseup","onmousedown","drawPaths","clearRect","width","height","forEach","path","i","length","onChangeLineWidth","onChangeColor","save","current","size","localStorage","dataURL","toDataURL","setItem","addNewImg","clear","eraser","picture","undo","splice"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, Fragment, useState } from 'react';\nimport Palette from '../Palette/Palette';\nimport Buttons from '../Buttons';\nimport styles from '../Gallery.module.css';\n\n\nconst Canvas = props => {\n    let [color, setColor] = useState('black');\n    let [gallery, setImage] = useState([]);\n    let [paths, setPath] = useState([]);\n    let [lineWidth, setLineWidth] = useState(30)\n    const canvasRef = useRef(null);\n    const draw = (canvas, color, mode) => {\n        let rememberPath = false;\n        let points = [];\n        let context = canvas.getContext('2d');\n        context.globalCompositeOperation = mode ==='line'? \"source-over\": \"destination-out\";\n        canvas.onmousemove = function drawIfPressed (e) {\n            let x = e.offsetX;\n            let y = e.offsetY;\n            let dx = e.movementX;\n            let dy = e.movementY;\n            context.lineCap = \"round\";\n            context.lineWidth = lineWidth;\n            if (e.buttons > 0) {\n              context.beginPath();\n              context.moveTo(x, y);\n              context.lineTo(x - dx, y - dy);\n              context.stroke();\n              context.strokeStyle = color;\n              context.closePath();\n            }\n            if(rememberPath){\n                points.push({x:x-dx, y:y-dy, color: color})\n            }\n        };\n        canvas.onmouseup = (e) => {//не нажата\n            setPath([...paths, points])\n            rememberPath = false;\n        };\n        canvas.onmousedown = (e)=>{//нажата\n            points = [];\n            rememberPath = true;\n        };\n    }\n    \n    const drawPaths = (canvas)=> {\n        let context = canvas.getContext('2d');\n        context.clearRect(0,0,canvas.width,canvas.height);\n        paths.forEach(path=>{\n        context.beginPath();\n        for(let i = 0; i < path.length; i++){\n            context.lineTo(path[i].x,path[i].y); \n            context.strokeStyle = path[i].color;\n        }\n        context.stroke();\n        })\n    };\n    const onChangeLineWidth = width => setLineWidth(width); \n    const onChangeColor = color => setColor(color);\n    const save = () => {\n        const canvas = canvasRef.current\n        let size = localStorage.length;\n        let dataURL = canvas.toDataURL(\"image/png\", 1.0);\n        localStorage.setItem(`gallery${size+1}`, dataURL)\n        addNewImg(dataURL); \n    };\n    const clear = () => {\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n    const eraser = () => {\n        const canvas = canvasRef.current\n        draw(canvas,\"rgb(255, 255, 255, 1)\",'eraser');\n    };\n    const addNewImg = (dataURL) => {\n        setImage([...gallery, <img key={dataURL} src={dataURL} className={styles.picture}/>]);\n    }\n    const undo = () => {\n        const canvas = canvasRef.current;\n        paths.splice(-1,1);\n        drawPaths(canvas);\n    }\n\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        draw(canvas, color,'line');\n    }, [draw, color, gallery]);\n  \n  return <Fragment>\n    <div className={styles.gallery}>{gallery}</div>\n    <canvas className={styles.canvas} width='450' height='450' ref={canvasRef} {...props}/>\n    <Buttons clear={clear} save ={save} eraser={eraser} undo={undo}/>\n    <Palette onChangeColor={onChangeColor}></Palette>\n  </Fragment> \n}\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}