{"ast":null,"code":"var _jsxFileName = \"/home/namina/courses/tinkoff/paint-your-face/src/DrawPane.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport DrawToolbar from \"./DrawToolbar\";\nimport { MODE, COLOR_MAP } from \"./constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getScaledPoint = (stage, scale) => {\n  const {\n    x,\n    y\n  } = stage.getPointerPosition();\n  return {\n    x: x / scale,\n    y: y / scale\n  };\n};\n\nconst DrawPane = props => {\n  _s();\n\n  let stage = null;\n  const [color, setColor] = useState(\"DARK\");\n  const [scale, setScale] = useState(1);\n  const [mode, setMode] = useState(MODE.PENCIL);\n  const [currentLine, setCurrentLine] = useState(null);\n  const [lines, setLines] = useState([]);\n\n  const onMouseDown = () => {\n    const {\n      x,\n      y\n    } = getScaledPoint(stage, scale);\n    setCurrentLine({\n      points: [x, y],\n      color\n    });\n  };\n\n  const onMouseMove = () => {\n    if (currentLine) {\n      const {\n        x,\n        y\n      } = getScaledPoint(stage, scale);\n\n      switch (mode) {\n        case MODE.PENCIL:\n          setCurrentLine({ ...currentLine,\n            points: [...currentLine.points, x, y]\n          });\n          break;\n\n        case MODE.LINE:\n          const [x0, y0] = currentLine.points;\n          setCurrentLine({ ...currentLine,\n            points: [x0, y0, x, y]\n          });\n          break;\n\n        default:\n      }\n    }\n  };\n\n  const onMouseUp = () => {\n    const {\n      x,\n      y\n    } = getScaledPoint(stage, scale);\n    setCurrentLine(null);\n    setLines([...lines, { ...currentLine,\n      points: [...currentLine.points, x, y]\n    }]);\n  };\n\n  const onSetMode = mode => {\n    setMode(mode);\n  };\n\n  const setStageRef = ref => {\n    if (ref) {\n      stage = ref;\n    }\n  };\n\n  const onChangeColor = color => {\n    setColor(color);\n  };\n\n  const onChangeScale = delta => {\n    setScale(scale + delta);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-layout\",\n    children: [/*#__PURE__*/_jsxDEV(DrawToolbar, {\n      mode: mode,\n      color: color,\n      scale: scale,\n      onChangeColor: onChangeColor,\n      onSetMode: onSetMode,\n      onChangeScale: onChangeScale\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      ref: setStageRef,\n      className: \"konva-container\",\n      width: props.width * scale,\n      height: props.height * scale,\n      onMouseDown: onMouseDown,\n      onMouseMove: onMouseMove,\n      onMouseUp: onMouseUp,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: [/*#__PURE__*/_jsxDEV(Line, { ...currentLine,\n          scale: {\n            x: scale,\n            y: scale\n          },\n          strokeWidth: 1,\n          stroke: COLOR_MAP[color]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), lines.map((line, index) => /*#__PURE__*/_jsxDEV(Line, { ...line,\n          scale: {\n            x: scale,\n            y: scale\n          },\n          strokeWidth: 1,\n          stroke: COLOR_MAP[line.color]\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this);\n};\n\n_s(DrawPane, \"YBnGquM/BvoiJFKqhCk5ghH5Z6I=\");\n\n_c = DrawPane;\nDrawPane.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number\n};\nexport default DrawPane;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrawPane\");","map":{"version":3,"sources":["/home/namina/courses/tinkoff/paint-your-face/src/DrawPane.js"],"names":["React","useState","PropTypes","Stage","Layer","Line","DrawToolbar","MODE","COLOR_MAP","getScaledPoint","stage","scale","x","y","getPointerPosition","DrawPane","props","color","setColor","setScale","mode","setMode","PENCIL","currentLine","setCurrentLine","lines","setLines","onMouseDown","points","onMouseMove","LINE","x0","y0","onMouseUp","onSetMode","setStageRef","ref","onChangeColor","onChangeScale","delta","width","height","map","line","index","propTypes","number"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport DrawToolbar from \"./DrawToolbar\";\nimport { MODE, COLOR_MAP } from \"./constants\";\n\nconst getScaledPoint = (stage, scale) => {\n  const { x, y } = stage.getPointerPosition();\n  return { x: x / scale, y: y / scale };\n};\n\nconst DrawPane = props => {\n  let stage = null;\n  const [color, setColor] = useState(\"DARK\");\n  const [scale, setScale] = useState(1);\n  const [mode, setMode] = useState(MODE.PENCIL);\n  const [currentLine, setCurrentLine] = useState(null);\n  const [lines, setLines] = useState([]);\n\n  const onMouseDown = () => {\n    const { x, y } = getScaledPoint(stage, scale);\n    setCurrentLine({ points: [x, y], color });\n  };\n\n  const onMouseMove = () => {\n    if (currentLine) {\n      const { x, y } = getScaledPoint(stage, scale);\n      switch (mode) {\n        case MODE.PENCIL:\n          setCurrentLine({\n            ...currentLine,\n            points: [...currentLine.points, x, y]\n          });\n          break;\n        case MODE.LINE:\n          const [x0, y0] = currentLine.points;\n          setCurrentLine({\n            ...currentLine,\n            points: [x0, y0, x, y]\n          });\n          break;\n        default:\n      }\n    }\n  };\n\n  const onMouseUp = () => {\n    const { x, y } = getScaledPoint(stage, scale);\n    setCurrentLine(null);\n    setLines([\n      ...lines,\n      { ...currentLine, points: [...currentLine.points, x, y] }\n    ]);\n  };\n\n  const onSetMode = mode => {\n    setMode(mode);\n  };\n\n  const setStageRef = ref => {\n    if (ref) {\n      stage = ref;\n    }\n  };\n\n  const onChangeColor = color => {\n    setColor(color);\n  };\n\n  const onChangeScale = delta => {\n    setScale(scale + delta);\n  };\n\n    return (\n      <div className=\"main-layout\">\n        <DrawToolbar\n          mode={mode}\n          color={color}\n          scale={scale}\n          onChangeColor={onChangeColor}\n          onSetMode={onSetMode}\n          onChangeScale={onChangeScale}\n        />\n        <Stage\n          ref={setStageRef}\n          className=\"konva-container\"\n          width={props.width * scale}\n          height={props.height * scale}\n          onMouseDown={onMouseDown}\n          onMouseMove={onMouseMove}\n          onMouseUp={onMouseUp}\n        >\n          <Layer>\n            <Line\n              {...currentLine}\n              scale={{ x: scale, y: scale }}\n              strokeWidth={1}\n              stroke={COLOR_MAP[color]}\n            />\n            {lines.map((line, index) => (\n              <Line\n                key={index}\n                {...line}\n                scale={{ x: scale, y: scale }}\n                strokeWidth={1}\n                stroke={COLOR_MAP[line.color]}\n              />\n            ))}\n          </Layer>\n        </Stage>\n      </div>\n    );\n  };\n\nDrawPane.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number\n};\n\nexport default DrawPane;\n"]},"metadata":{},"sourceType":"module"}